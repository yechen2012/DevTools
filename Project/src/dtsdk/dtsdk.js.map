{"version":3,"sources":["webpack://dtsdk/webpack/bootstrap","webpack://dtsdk/./src/proto.js","webpack://dtsdk/./src/util.js","webpack://dtsdk/./src/index.js","webpack://dtsdk/./src/dtcommonclient.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$protobuf","protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","dtsdkserv","valuesById","values","MainType","SubAccountType","SubBaseType","SubGameType","ErrResponse","properties","keys","length","this","errCode","encode","message","writer","uint32","string","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isString","fromObject","String","toObject","options","defaults","toJSON","constructor","toJSONOptions","LoginRequest","token","gameCode","version","isLogin","deviceInfo","loadingTime","bool","int32","isInteger","Boolean","LoginResponse","playerName","platformCode","currency","servVersion","KeepAliveRequest","KeepAliveResponse","timeNow","Long","fromBits","int64","low","high","fromValue","unsigned","parseInt","LongBits","toNumber","long","longs","toString","Number","CmdRet","mainType","subType","isOk","FreeSpin","id","bet","line","totalnums","times","lastnums","Title","Info","ExpireTime","FreeSpinRsp","FSpin","emptyArray","fork","push","Array","isArray","error","TypeError","arrays","j","ScreenType","ChangeScreenRequest","screen","enums","config","outputlog","log","type","info","console","setUint16","buf","start","val","getUint16","setUint32","getUint32","appendBytes","buf1","buf2","Uint8Array","set","client","pb","init","servaddr","close","DTCommonClient","connect","onWebSocketState","onOpen","onMessage","onError","onClose","onWebSocketOpenCallBack","onWebSocketOnMessage","onWebSocketOnError","onWebSocketOnClose","createObject","maintype","subtype","pushCallBack","callback","sendMsgToDtsdk","msg","sendmsg","getConneting","isconneting","isConnecting","getVersion","clientType","clienttype","getDtsdkclient","WebSocket","window","MozWebSocket","HEADERLEN","addr","servAddr","ws","msgbuf","heartTimer","heartTime","heartAcceptTime","hasAcceptMsg","reconnectTimes","isByActive","clientdata","initdata","MainTypeArr","SubBaseTypeArr","reqdecode","rspdecode","SubAccountTypeArr","SubGameTypeArr","header","binaryType","self","onopen","evt","onmessage","_ondata","data","flags","onerror","onclose","stopReConnect","reConnect","obj","stopHeartTimer","cb","finish","send","parseMsg","parseHeader","subarray","onMsg","MainBase","SubKeepAliveRsp","onKeepAliveResponse","MainAccount","SubAccountLoginRsp","SubLoginRsp","onKeepAliveRequest","getCallBack","count","startHeartTimer","setInterval","SubErrRsp","SubKeepAliveReq","timestamp","date","Y","M","D","h","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","clearInterval"],"mappings":"sBACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gSClF/CC,EAAYC,SAEZC,EAAUF,EAAUG,OAAQC,EAAUJ,EAAUK,OAAQC,EAAQN,EAAUO,KAG1EC,EAAQR,EAAUS,MAAV,UAA+BT,EAAUS,MAAV,QAA6B,IAEjDC,EAAZA,UAAYF,EAAME,UAAa,WAOxC,IAWUC,EAAiBC,EAXrBF,EAAY,GAwrElB,OA9qEAA,EAAUG,UACAF,EAAa,IAAIC,EAASlC,OAAOY,OAAOqB,IACvCA,EAAW,GAAK,YAAc,EACrCC,EAAOD,EAAW,GAAK,eAAiB,EACxCC,EAAOD,EAAW,GAAK,YAAc,EAC9BC,GAUXF,EAAUI,eAAkB,WACxB,IAAMH,EAAa,GAAIC,EAASlC,OAAOY,OAAOqB,GAG9C,OAFAC,EAAOD,EAAW,GAAK,eAAiB,EACxCC,EAAOD,EAAW,GAAK,eAAiB,EACjCC,EAJiB,GAgB5BF,EAAUK,YAAe,WACrB,IAAMJ,EAAa,GAAIC,EAASlC,OAAOY,OAAOqB,GAK9C,OAJAC,EAAOD,EAAW,GAAK,mBAAqB,EAC5CC,EAAOD,EAAW,GAAK,mBAAqB,EAC5CC,EAAOD,EAAW,GAAK,aAAe,EACtCC,EAAOD,EAAW,GAAK,aAAe,EAC/BC,EANc,GAiBzBF,EAAUM,YAAe,WACrB,IAAML,EAAa,GAAIC,EAASlC,OAAOY,OAAOqB,GAI9C,OAHAC,EAAOD,EAAW,GAAK,uBAAyB,EAChDC,EAAOD,EAAW,GAAK,uBAAyB,EAChDC,EAAOD,EAAW,GAAK,0BAA4B,EAC5CC,EALc,GAQzBF,EAAUO,YAAe,WAiBrB,SAASA,EAAYC,GACjB,GAAIA,EACA,IAAK,IAAIC,EAAOzC,OAAOyC,KAAKD,GAAalD,EAAI,EAAGA,EAAImD,EAAKC,SAAUpD,EACpC,MAAvBkD,EAAWC,EAAKnD,MAChBqD,KAAKF,EAAKnD,IAAMkD,EAAWC,EAAKnD,KAmKhD,OA1JAiD,EAAYrB,UAAU0B,QAAU,GAUhCL,EAAY3B,OAAS,SAAgB4B,GACjC,OAAO,IAAID,EAAYC,IAY3BD,EAAYM,OAAS,SAAgBC,EAASC,GAK1C,OAJKA,IACDA,EAASrB,EAAQd,UACE,MAAnBkC,EAAQF,SAAmB5C,OAAOmB,eAAe1B,KAAKqD,EAAS,YAC/DC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQF,SACrDG,GAYXR,EAAYW,gBAAkB,SAAyBJ,EAASC,GAC5D,OAAOJ,KAAKE,OAAOC,EAASC,GAAQI,UAcxCZ,EAAYa,OAAS,SAAgBC,EAAQX,GACnCW,aAAkB7B,IACpB6B,EAAS7B,EAAQZ,OAAOyC,IAE5B,IADA,IAAIC,OAAiBC,IAAXb,EAAuBW,EAAOG,IAAMH,EAAOI,IAAMf,EAAQI,EAAU,IAAIhB,EAAME,UAAUO,YAC1Fc,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQF,QAAUS,EAAOJ,SACzB,MACJ,QACII,EAAOM,SAAe,EAAND,IAIxB,OAAOZ,GAaXP,EAAYqB,gBAAkB,SAAyBP,GAGnD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBV,KAAKS,OAAOC,EAAQA,EAAOL,WAWtCT,EAAYsB,OAAS,SAAgBf,GACjC,MAAuB,iBAAnB,IAAOA,EAAP,cAAOA,KAAoC,OAAZA,EACxB,kBACY,MAAnBA,EAAQF,SAAmBE,EAAQ3B,eAAe,aAC7CS,EAAMkC,SAAShB,EAAQF,SACjB,2BACR,MAWXL,EAAYwB,WAAa,SAAoB/C,GACzC,GAAIA,aAAkBc,EAAME,UAAUO,YAClC,OAAOvB,EACX,IAAI8B,EAAU,IAAIhB,EAAME,UAAUO,YAGlC,OAFsB,MAAlBvB,EAAO4B,UACPE,EAAQF,QAAUoB,OAAOhD,EAAO4B,UAC7BE,GAYXP,EAAY0B,SAAW,SAAkBnB,EAASoB,GACzCA,IACDA,EAAU,IACd,IAAIlD,EAAS,GAKb,OAJIkD,EAAQC,WACRnD,EAAO4B,QAAU,IACE,MAAnBE,EAAQF,SAAmBE,EAAQ3B,eAAe,aAClDH,EAAO4B,QAAUE,EAAQF,SACtB5B,GAUXuB,EAAYrB,UAAUkD,OAAS,WAC3B,OAAOzB,KAAK0B,YAAYJ,SAAStB,KAAMrB,EAAUO,KAAKyC,gBAGnD/B,EAxLc,GA2LzBP,EAAUuC,aAAgB,WAsBtB,SAASA,EAAa/B,GAClB,GAAIA,EACA,IAAK,IAAIC,EAAOzC,OAAOyC,KAAKD,GAAalD,EAAI,EAAGA,EAAImD,EAAKC,SAAUpD,EACpC,MAAvBkD,EAAWC,EAAKnD,MAChBqD,KAAKF,EAAKnD,IAAMkD,EAAWC,EAAKnD,KA6QhD,OApQAiF,EAAarD,UAAUsD,MAAQ,GAQ/BD,EAAarD,UAAUuD,SAAW,GAQlCF,EAAarD,UAAUwD,QAAU,GAQjCH,EAAarD,UAAUyD,SAAU,EAQjCJ,EAAarD,UAAU0D,WAAa,GAQpCL,EAAarD,UAAU2D,YAAc,EAUrCN,EAAa3D,OAAS,SAAgB4B,GAClC,OAAO,IAAI+B,EAAa/B,IAY5B+B,EAAa1B,OAAS,SAAgBC,EAASC,GAe3C,OAdKA,IACDA,EAASrB,EAAQd,UACA,MAAjBkC,EAAQ0B,OAAiBxE,OAAOmB,eAAe1B,KAAKqD,EAAS,UAC7DC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQ0B,OACpC,MAApB1B,EAAQ2B,UAAoBzE,OAAOmB,eAAe1B,KAAKqD,EAAS,aAChEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQ2B,UACrC,MAAnB3B,EAAQ4B,SAAmB1E,OAAOmB,eAAe1B,KAAKqD,EAAS,YAC/DC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQ4B,SACrC,MAAnB5B,EAAQ6B,SAAmB3E,OAAOmB,eAAe1B,KAAKqD,EAAS,YAC/DC,EAAOC,OAA8B,IAAI8B,KAAKhC,EAAQ6B,SAChC,MAAtB7B,EAAQ8B,YAAsB5E,OAAOmB,eAAe1B,KAAKqD,EAAS,eAClEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQ8B,YACjC,MAAvB9B,EAAQ+B,aAAuB7E,OAAOmB,eAAe1B,KAAKqD,EAAS,gBACnEC,EAAOC,OAA8B,IAAI+B,MAAMjC,EAAQ+B,aACpD9B,GAYXwB,EAAarB,gBAAkB,SAAyBJ,EAASC,GAC7D,OAAOJ,KAAKE,OAAOC,EAASC,GAAQI,UAcxCoB,EAAanB,OAAS,SAAgBC,EAAQX,GACpCW,aAAkB7B,IACpB6B,EAAS7B,EAAQZ,OAAOyC,IAE5B,IADA,IAAIC,OAAiBC,IAAXb,EAAuBW,EAAOG,IAAMH,EAAOI,IAAMf,EAAQI,EAAU,IAAIhB,EAAME,UAAUuC,aAC1FlB,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQ0B,MAAQnB,EAAOJ,SACvB,MACJ,KAAK,EACDH,EAAQ2B,SAAWpB,EAAOJ,SAC1B,MACJ,KAAK,EACDH,EAAQ4B,QAAUrB,EAAOJ,SACzB,MACJ,KAAK,EACDH,EAAQ6B,QAAUtB,EAAOyB,OACzB,MACJ,KAAK,EACDhC,EAAQ8B,WAAavB,EAAOJ,SAC5B,MACJ,KAAK,EACDH,EAAQ+B,YAAcxB,EAAO0B,QAC7B,MACJ,QACI1B,EAAOM,SAAe,EAAND,IAIxB,OAAOZ,GAaXyB,EAAaX,gBAAkB,SAAyBP,GAGpD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBV,KAAKS,OAAOC,EAAQA,EAAOL,WAWtCuB,EAAaV,OAAS,SAAgBf,GAClC,MAAuB,iBAAnB,IAAOA,EAAP,cAAOA,KAAoC,OAAZA,EACxB,kBACU,MAAjBA,EAAQ0B,OAAiB1B,EAAQ3B,eAAe,WAC3CS,EAAMkC,SAAShB,EAAQ0B,OACjB,yBACS,MAApB1B,EAAQ2B,UAAoB3B,EAAQ3B,eAAe,cAC9CS,EAAMkC,SAAShB,EAAQ2B,UACjB,4BACQ,MAAnB3B,EAAQ4B,SAAmB5B,EAAQ3B,eAAe,aAC7CS,EAAMkC,SAAShB,EAAQ4B,SACjB,2BACQ,MAAnB5B,EAAQ6B,SAAmB7B,EAAQ3B,eAAe,YACnB,kBAApB2B,EAAQ6B,QACR,4BACW,MAAtB7B,EAAQ8B,YAAsB9B,EAAQ3B,eAAe,gBAChDS,EAAMkC,SAAShB,EAAQ8B,YACjB,8BACY,MAAvB9B,EAAQ+B,aAAuB/B,EAAQ3B,eAAe,iBACjDS,EAAMoD,UAAUlC,EAAQ+B,aAClB,gCACR,MAWXN,EAAaR,WAAa,SAAoB/C,GAC1C,GAAIA,aAAkBc,EAAME,UAAUuC,aAClC,OAAOvD,EACX,IAAI8B,EAAU,IAAIhB,EAAME,UAAUuC,aAalC,OAZoB,MAAhBvD,EAAOwD,QACP1B,EAAQ0B,MAAQR,OAAOhD,EAAOwD,QACX,MAAnBxD,EAAOyD,WACP3B,EAAQ2B,SAAWT,OAAOhD,EAAOyD,WACf,MAAlBzD,EAAO0D,UACP5B,EAAQ4B,QAAUV,OAAOhD,EAAO0D,UACd,MAAlB1D,EAAO2D,UACP7B,EAAQ6B,QAAUM,QAAQjE,EAAO2D,UACZ,MAArB3D,EAAO4D,aACP9B,EAAQ8B,WAAaZ,OAAOhD,EAAO4D,aACb,MAAtB5D,EAAO6D,cACP/B,EAAQ+B,YAAmC,EAArB7D,EAAO6D,aAC1B/B,GAYXyB,EAAaN,SAAW,SAAkBnB,EAASoB,GAC1CA,IACDA,EAAU,IACd,IAAIlD,EAAS,GAqBb,OApBIkD,EAAQC,WACRnD,EAAOwD,MAAQ,GACfxD,EAAOyD,SAAW,GAClBzD,EAAO0D,QAAU,GACjB1D,EAAO2D,SAAU,EACjB3D,EAAO4D,WAAa,GACpB5D,EAAO6D,YAAc,GAEJ,MAAjB/B,EAAQ0B,OAAiB1B,EAAQ3B,eAAe,WAChDH,EAAOwD,MAAQ1B,EAAQ0B,OACH,MAApB1B,EAAQ2B,UAAoB3B,EAAQ3B,eAAe,cACnDH,EAAOyD,SAAW3B,EAAQ2B,UACP,MAAnB3B,EAAQ4B,SAAmB5B,EAAQ3B,eAAe,aAClDH,EAAO0D,QAAU5B,EAAQ4B,SACN,MAAnB5B,EAAQ6B,SAAmB7B,EAAQ3B,eAAe,aAClDH,EAAO2D,QAAU7B,EAAQ6B,SACH,MAAtB7B,EAAQ8B,YAAsB9B,EAAQ3B,eAAe,gBACrDH,EAAO4D,WAAa9B,EAAQ8B,YACL,MAAvB9B,EAAQ+B,aAAuB/B,EAAQ3B,eAAe,iBACtDH,EAAO6D,YAAc/B,EAAQ+B,aAC1B7D,GAUXuD,EAAarD,UAAUkD,OAAS,WAC5B,OAAOzB,KAAK0B,YAAYJ,SAAStB,KAAMrB,EAAUO,KAAKyC,gBAGnDC,EAvSe,GA0S1BvC,EAAUkD,cAAiB,WAoBvB,SAASA,EAAc1C,GACnB,GAAIA,EACA,IAAK,IAAIC,EAAOzC,OAAOyC,KAAKD,GAAalD,EAAI,EAAGA,EAAImD,EAAKC,SAAUpD,EACpC,MAAvBkD,EAAWC,EAAKnD,MAChBqD,KAAKF,EAAKnD,IAAMkD,EAAWC,EAAKnD,KAmOhD,OA1NA4F,EAAchE,UAAUiE,WAAa,GAQrCD,EAAchE,UAAUkE,aAAe,GAQvCF,EAAchE,UAAUmE,SAAW,GAQnCH,EAAchE,UAAUoE,YAAc,GAUtCJ,EAActE,OAAS,SAAgB4B,GACnC,OAAO,IAAI0C,EAAc1C,IAY7B0C,EAAcrC,OAAS,SAAgBC,EAASC,GAW5C,OAVKA,IACDA,EAASrB,EAAQd,UACK,MAAtBkC,EAAQqC,YAAsBnF,OAAOmB,eAAe1B,KAAKqD,EAAS,eAClEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQqC,YAChC,MAAxBrC,EAAQsC,cAAwBpF,OAAOmB,eAAe1B,KAAKqD,EAAS,iBACpEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQsC,cACpC,MAApBtC,EAAQuC,UAAoBrF,OAAOmB,eAAe1B,KAAKqD,EAAS,aAChEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQuC,UACjC,MAAvBvC,EAAQwC,aAAuBtF,OAAOmB,eAAe1B,KAAKqD,EAAS,gBACnEC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQwC,aACrDvC,GAYXmC,EAAchC,gBAAkB,SAAyBJ,EAASC,GAC9D,OAAOJ,KAAKE,OAAOC,EAASC,GAAQI,UAcxC+B,EAAc9B,OAAS,SAAgBC,EAAQX,GACrCW,aAAkB7B,IACpB6B,EAAS7B,EAAQZ,OAAOyC,IAE5B,IADA,IAAIC,OAAiBC,IAAXb,EAAuBW,EAAOG,IAAMH,EAAOI,IAAMf,EAAQI,EAAU,IAAIhB,EAAME,UAAUkD,cAC1F7B,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQqC,WAAa9B,EAAOJ,SAC5B,MACJ,KAAK,EACDH,EAAQsC,aAAe/B,EAAOJ,SAC9B,MACJ,KAAK,EACDH,EAAQuC,SAAWhC,EAAOJ,SAC1B,MACJ,KAAK,EACDH,EAAQwC,YAAcjC,EAAOJ,SAC7B,MACJ,QACII,EAAOM,SAAe,EAAND,IAIxB,OAAOZ,GAaXoC,EAActB,gBAAkB,SAAyBP,GAGrD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBV,KAAKS,OAAOC,EAAQA,EAAOL,WAWtCkC,EAAcrB,OAAS,SAAgBf,GACnC,MAAuB,iBAAnB,IAAOA,EAAP,cAAOA,KAAoC,OAAZA,EACxB,kBACe,MAAtBA,EAAQqC,YAAsBrC,EAAQ3B,eAAe,gBAChDS,EAAMkC,SAAShB,EAAQqC,YACjB,8BACa,MAAxBrC,EAAQsC,cAAwBtC,EAAQ3B,eAAe,kBAClDS,EAAMkC,SAAShB,EAAQsC,cACjB,gCACS,MAApBtC,EAAQuC,UAAoBvC,EAAQ3B,eAAe,cAC9CS,EAAMkC,SAAShB,EAAQuC,UACjB,4BACY,MAAvBvC,EAAQwC,aAAuBxC,EAAQ3B,eAAe,iBACjDS,EAAMkC,SAAShB,EAAQwC,aACjB,+BACR,MAWXJ,EAAcnB,WAAa,SAAoB/C,GAC3C,GAAIA,aAAkBc,EAAME,UAAUkD,cAClC,OAAOlE,EACX,IAAI8B,EAAU,IAAIhB,EAAME,UAAUkD,cASlC,OARyB,MAArBlE,EAAOmE,aACPrC,EAAQqC,WAAanB,OAAOhD,EAAOmE,aACZ,MAAvBnE,EAAOoE,eACPtC,EAAQsC,aAAepB,OAAOhD,EAAOoE,eAClB,MAAnBpE,EAAOqE,WACPvC,EAAQuC,SAAWrB,OAAOhD,EAAOqE,WACX,MAAtBrE,EAAOsE,cACPxC,EAAQwC,YAActB,OAAOhD,EAAOsE,cACjCxC,GAYXoC,EAAcjB,SAAW,SAAkBnB,EAASoB,GAC3CA,IACDA,EAAU,IACd,IAAIlD,EAAS,GAeb,OAdIkD,EAAQC,WACRnD,EAAOmE,WAAa,GACpBnE,EAAOoE,aAAe,GACtBpE,EAAOqE,SAAW,GAClBrE,EAAOsE,YAAc,IAEC,MAAtBxC,EAAQqC,YAAsBrC,EAAQ3B,eAAe,gBACrDH,EAAOmE,WAAarC,EAAQqC,YACJ,MAAxBrC,EAAQsC,cAAwBtC,EAAQ3B,eAAe,kBACvDH,EAAOoE,aAAetC,EAAQsC,cACV,MAApBtC,EAAQuC,UAAoBvC,EAAQ3B,eAAe,cACnDH,EAAOqE,SAAWvC,EAAQuC,UACH,MAAvBvC,EAAQwC,aAAuBxC,EAAQ3B,eAAe,iBACtDH,EAAOsE,YAAcxC,EAAQwC,aAC1BtE,GAUXkE,EAAchE,UAAUkD,OAAS,WAC7B,OAAOzB,KAAK0B,YAAYJ,SAAStB,KAAMrB,EAAUO,KAAKyC,gBAGnDY,EA3PgB,GA8P3BlD,EAAUuD,iBAAoB,WAiB1B,SAASA,EAAiB/C,GACtB,GAAIA,EACA,IAAK,IAAIC,EAAOzC,OAAOyC,KAAKD,GAAalD,EAAI,EAAGA,EAAImD,EAAKC,SAAUpD,EACpC,MAAvBkD,EAAWC,EAAKnD,MAChBqD,KAAKF,EAAKnD,IAAMkD,EAAWC,EAAKnD,KAmKhD,OA1JAiG,EAAiBrE,UAAUwD,QAAU,GAUrCa,EAAiB3E,OAAS,SAAgB4B,GACtC,OAAO,IAAI+C,EAAiB/C,IAYhC+C,EAAiB1C,OAAS,SAAgBC,EAASC,GAK/C,OAJKA,IACDA,EAASrB,EAAQd,UACE,MAAnBkC,EAAQ4B,SAAmB1E,OAAOmB,eAAe1B,KAAKqD,EAAS,YAC/DC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQ4B,SACrD3B,GAYXwC,EAAiBrC,gBAAkB,SAAyBJ,EAASC,GACjE,OAAOJ,KAAKE,OAAOC,EAASC,GAAQI,UAcxCoC,EAAiBnC,OAAS,SAAgBC,EAAQX,GACxCW,aAAkB7B,IACpB6B,EAAS7B,EAAQZ,OAAOyC,IAE5B,IADA,IAAIC,OAAiBC,IAAXb,EAAuBW,EAAOG,IAAMH,EAAOI,IAAMf,EAAQI,EAAU,IAAIhB,EAAME,UAAUuD,iBAC1FlC,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQ4B,QAAUrB,EAAOJ,SACzB,MACJ,QACII,EAAOM,SAAe,EAAND,IAIxB,OAAOZ,GAaXyC,EAAiB3B,gBAAkB,SAAyBP,GAGxD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBV,KAAKS,OAAOC,EAAQA,EAAOL,WAWtCuC,EAAiB1B,OAAS,SAAgBf,GACtC,MAAuB,iBAAnB,IAAOA,EAAP,cAAOA,KAAoC,OAAZA,EACxB,kBACY,MAAnBA,EAAQ4B,SAAmB5B,EAAQ3B,eAAe,aAC7CS,EAAMkC,SAAShB,EAAQ4B,SACjB,2BACR,MAWXa,EAAiBxB,WAAa,SAAoB/C,GAC9C,GAAIA,aAAkBc,EAAME,UAAUuD,iBAClC,OAAOvE,EACX,IAAI8B,EAAU,IAAIhB,EAAME,UAAUuD,iBAGlC,OAFsB,MAAlBvE,EAAO0D,UACP5B,EAAQ4B,QAAUV,OAAOhD,EAAO0D,UAC7B5B,GAYXyC,EAAiBtB,SAAW,SAAkBnB,EAASoB,GAC9CA,IACDA,EAAU,IACd,IAAIlD,EAAS,GAKb,OAJIkD,EAAQC,WACRnD,EAAO0D,QAAU,IACE,MAAnB5B,EAAQ4B,SAAmB5B,EAAQ3B,eAAe,aAClDH,EAAO0D,QAAU5B,EAAQ4B,SACtB1D,GAUXuE,EAAiBrE,UAAUkD,OAAS,WAChC,OAAOzB,KAAK0B,YAAYJ,SAAStB,KAAMrB,EAAUO,KAAKyC,gBAGnDiB,EAxLmB,GA2L9BvD,EAAUwD,kBAAqB,WAiB3B,SAASA,EAAkBhD,GACvB,GAAIA,EACA,IAAK,IAAIC,EAAOzC,OAAOyC,KAAKD,GAAalD,EAAI,EAAGA,EAAImD,EAAKC,SAAUpD,EACpC,MAAvBkD,EAAWC,EAAKnD,MAChBqD,KAAKF,EAAKnD,IAAMkD,EAAWC,EAAKnD,KAiLhD,OAxKAkG,EAAkBtE,UAAUuE,QAAU7D,EAAM8D,KAAO9D,EAAM8D,KAAKC,SAAS,EAAE,GAAE,GAAS,EAUpFH,EAAkB5E,OAAS,SAAgB4B,GACvC,OAAO,IAAIgD,EAAkBhD,IAYjCgD,EAAkB3C,OAAS,SAAgBC,EAASC,GAKhD,OAJKA,IACDA,EAASrB,EAAQd,UACE,MAAnBkC,EAAQ2C,SAAmBzF,OAAOmB,eAAe1B,KAAKqD,EAAS,YAC/DC,EAAOC,OAA8B,GAAG4C,MAAM9C,EAAQ2C,SACnD1C,GAYXyC,EAAkBtC,gBAAkB,SAAyBJ,EAASC,GAClE,OAAOJ,KAAKE,OAAOC,EAASC,GAAQI,UAcxCqC,EAAkBpC,OAAS,SAAgBC,EAAQX,GACzCW,aAAkB7B,IACpB6B,EAAS7B,EAAQZ,OAAOyC,IAE5B,IADA,IAAIC,OAAiBC,IAAXb,EAAuBW,EAAOG,IAAMH,EAAOI,IAAMf,EAAQI,EAAU,IAAIhB,EAAME,UAAUwD,kBAC1FnC,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQ2C,QAAUpC,EAAOuC,QACzB,MACJ,QACIvC,EAAOM,SAAe,EAAND,IAIxB,OAAOZ,GAaX0C,EAAkB5B,gBAAkB,SAAyBP,GAGzD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBV,KAAKS,OAAOC,EAAQA,EAAOL,WAWtCwC,EAAkB3B,OAAS,SAAgBf,GACvC,MAAuB,iBAAnB,IAAOA,EAAP,cAAOA,KAAoC,OAAZA,EACxB,kBACY,MAAnBA,EAAQ2C,SAAmB3C,EAAQ3B,eAAe,cAC7CS,EAAMoD,UAAUlC,EAAQ2C,UAAc3C,EAAQ2C,SAAW7D,EAAMoD,UAAUlC,EAAQ2C,QAAQI,MAAQjE,EAAMoD,UAAUlC,EAAQ2C,QAAQK,OAC3H,iCACR,MAWXN,EAAkBzB,WAAa,SAAoB/C,GAC/C,GAAIA,aAAkBc,EAAME,UAAUwD,kBAClC,OAAOxE,EACX,IAAI8B,EAAU,IAAIhB,EAAME,UAAUwD,kBAUlC,OATsB,MAAlBxE,EAAOyE,UACH7D,EAAM8D,MACL5C,EAAQ2C,QAAU7D,EAAM8D,KAAKK,UAAU/E,EAAOyE,UAAUO,UAAW,EACrC,iBAAnBhF,EAAOyE,QACnB3C,EAAQ2C,QAAUQ,SAASjF,EAAOyE,QAAS,IACZ,iBAAnBzE,EAAOyE,QACnB3C,EAAQ2C,QAAUzE,EAAOyE,QACM,WAA1B,EAAOzE,EAAOyE,WACnB3C,EAAQ2C,QAAU,IAAI7D,EAAMsE,SAASlF,EAAOyE,QAAQI,MAAQ,EAAG7E,EAAOyE,QAAQK,OAAS,GAAGK,aAC3FrD,GAYX0C,EAAkBvB,SAAW,SAAkBnB,EAASoB,GAC/CA,IACDA,EAAU,IACd,IAAIlD,EAAS,GACb,GAAIkD,EAAQC,SACR,GAAIvC,EAAM8D,KAAM,CACZ,IAAIU,EAAO,IAAIxE,EAAM8D,KAAK,EAAG,GAAG,GAChC1E,EAAOyE,QAAUvB,EAAQmC,QAAUrC,OAASoC,EAAKE,WAAapC,EAAQmC,QAAUE,OAASH,EAAKD,WAAaC,OAE3GpF,EAAOyE,QAAUvB,EAAQmC,QAAUrC,OAAS,IAAM,EAM1D,OALuB,MAAnBlB,EAAQ2C,SAAmB3C,EAAQ3B,eAAe,aACnB,iBAApB2B,EAAQ2C,QACfzE,EAAOyE,QAAUvB,EAAQmC,QAAUrC,OAASA,OAAOlB,EAAQ2C,SAAW3C,EAAQ2C,QAE9EzE,EAAOyE,QAAUvB,EAAQmC,QAAUrC,OAASpC,EAAM8D,KAAKxE,UAAUoF,SAAS7G,KAAKqD,EAAQ2C,SAAWvB,EAAQmC,QAAUE,OAAS,IAAI3E,EAAMsE,SAASpD,EAAQ2C,QAAQI,MAAQ,EAAG/C,EAAQ2C,QAAQK,OAAS,GAAGK,WAAarD,EAAQ2C,SAC7NzE,GAUXwE,EAAkBtE,UAAUkD,OAAS,WACjC,OAAOzB,KAAK0B,YAAYJ,SAAStB,KAAMrB,EAAUO,KAAKyC,gBAGnDkB,EAtMoB,GAyM/BxD,EAAUwE,OAAU,WAmBhB,SAASA,EAAOhE,GACZ,GAAIA,EACA,IAAK,IAAIC,EAAOzC,OAAOyC,KAAKD,GAAalD,EAAI,EAAGA,EAAImD,EAAKC,SAAUpD,EACpC,MAAvBkD,EAAWC,EAAKnD,MAChBqD,KAAKF,EAAKnD,IAAMkD,EAAWC,EAAKnD,KA8MhD,OArMAkH,EAAOtF,UAAUuF,SAAW,EAQ5BD,EAAOtF,UAAUwF,QAAU,EAQ3BF,EAAOtF,UAAUyF,MAAO,EAUxBH,EAAO5F,OAAS,SAAgB4B,GAC5B,OAAO,IAAIgE,EAAOhE,IAYtBgE,EAAO3D,OAAS,SAAgBC,EAASC,GASrC,OARKA,IACDA,EAASrB,EAAQd,UACG,MAApBkC,EAAQ2D,UAAoBzG,OAAOmB,eAAe1B,KAAKqD,EAAS,aAChEC,EAAOC,OAA8B,GAAG+B,MAAMjC,EAAQ2D,UACnC,MAAnB3D,EAAQ4D,SAAmB1G,OAAOmB,eAAe1B,KAAKqD,EAAS,YAC/DC,EAAOC,OAA8B,IAAI+B,MAAMjC,EAAQ4D,SACvC,MAAhB5D,EAAQ6D,MAAgB3G,OAAOmB,eAAe1B,KAAKqD,EAAS,SAC5DC,EAAOC,OAA8B,IAAI8B,KAAKhC,EAAQ6D,MACnD5D,GAYXyD,EAAOtD,gBAAkB,SAAyBJ,EAASC,GACvD,OAAOJ,KAAKE,OAAOC,EAASC,GAAQI,UAcxCqD,EAAOpD,OAAS,SAAgBC,EAAQX,GAC9BW,aAAkB7B,IACpB6B,EAAS7B,EAAQZ,OAAOyC,IAE5B,IADA,IAAIC,OAAiBC,IAAXb,EAAuBW,EAAOG,IAAMH,EAAOI,IAAMf,EAAQI,EAAU,IAAIhB,EAAME,UAAUwE,OAC1FnD,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQ2D,SAAWpD,EAAO0B,QAC1B,MACJ,KAAK,EACDjC,EAAQ4D,QAAUrD,EAAO0B,QACzB,MACJ,KAAK,EACDjC,EAAQ6D,KAAOtD,EAAOyB,OACtB,MACJ,QACIzB,EAAOM,SAAe,EAAND,IAIxB,OAAOZ,GAaX0D,EAAO5C,gBAAkB,SAAyBP,GAG9C,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBV,KAAKS,OAAOC,EAAQA,EAAOL,WAWtCwD,EAAO3C,OAAS,SAAgBf,GAC5B,MAAuB,iBAAnB,IAAOA,EAAP,cAAOA,KAAoC,OAAZA,EACxB,kBACa,MAApBA,EAAQ2D,UAAoB3D,EAAQ3B,eAAe,cAC9CS,EAAMoD,UAAUlC,EAAQ2D,UAClB,6BACQ,MAAnB3D,EAAQ4D,SAAmB5D,EAAQ3B,eAAe,aAC7CS,EAAMoD,UAAUlC,EAAQ4D,SAClB,4BACK,MAAhB5D,EAAQ6D,MAAgB7D,EAAQ3B,eAAe,SACnB,kBAAjB2B,EAAQ6D,KACR,yBACR,MAWXH,EAAOzC,WAAa,SAAoB/C,GACpC,GAAIA,aAAkBc,EAAME,UAAUwE,OAClC,OAAOxF,EACX,IAAI8B,EAAU,IAAIhB,EAAME,UAAUwE,OAOlC,OANuB,MAAnBxF,EAAOyF,WACP3D,EAAQ2D,SAA6B,EAAlBzF,EAAOyF,UACR,MAAlBzF,EAAO0F,UACP5D,EAAQ4D,QAA2B,EAAjB1F,EAAO0F,SACV,MAAf1F,EAAO2F,OACP7D,EAAQ6D,KAAO1B,QAAQjE,EAAO2F,OAC3B7D,GAYX0D,EAAOvC,SAAW,SAAkBnB,EAASoB,GACpCA,IACDA,EAAU,IACd,IAAIlD,EAAS,GAYb,OAXIkD,EAAQC,WACRnD,EAAOyF,SAAW,EAClBzF,EAAO0F,QAAU,EACjB1F,EAAO2F,MAAO,GAEM,MAApB7D,EAAQ2D,UAAoB3D,EAAQ3B,eAAe,cACnDH,EAAOyF,SAAW3D,EAAQ2D,UACP,MAAnB3D,EAAQ4D,SAAmB5D,EAAQ3B,eAAe,aAClDH,EAAO0F,QAAU5D,EAAQ4D,SACT,MAAhB5D,EAAQ6D,MAAgB7D,EAAQ3B,eAAe,UAC/CH,EAAO2F,KAAO7D,EAAQ6D,MACnB3F,GAUXwF,EAAOtF,UAAUkD,OAAS,WACtB,OAAOzB,KAAK0B,YAAYJ,SAAStB,KAAMrB,EAAUO,KAAKyC,gBAGnDkC,EArOS,GAwOpBxE,EAAU4E,SAAY,WAyBlB,SAASA,EAASpE,GACd,GAAIA,EACA,IAAK,IAAIC,EAAOzC,OAAOyC,KAAKD,GAAalD,EAAI,EAAGA,EAAImD,EAAKC,SAAUpD,EACpC,MAAvBkD,EAAWC,EAAKnD,MAChBqD,KAAKF,EAAKnD,IAAMkD,EAAWC,EAAKnD,KA0VhD,OAjVAsH,EAAS1F,UAAU2F,GAAK,GAQxBD,EAAS1F,UAAU4F,IAAM,EAQzBF,EAAS1F,UAAU6F,KAAO,EAQ1BH,EAAS1F,UAAU8F,UAAY,EAQ/BJ,EAAS1F,UAAU+F,MAAQ,EAQ3BL,EAAS1F,UAAUgG,SAAW,EAQ9BN,EAAS1F,UAAUiG,MAAQ,GAQ3BP,EAAS1F,UAAUkG,KAAO,GAQ1BR,EAAS1F,UAAUmG,WAAazF,EAAM8D,KAAO9D,EAAM8D,KAAKC,SAAS,EAAE,GAAE,GAAS,EAU9EiB,EAAShG,OAAS,SAAgB4B,GAC9B,OAAO,IAAIoE,EAASpE,IAYxBoE,EAAS/D,OAAS,SAAgBC,EAASC,GAqBvC,OApBKA,IACDA,EAASrB,EAAQd,UACH,MAAdkC,EAAQ+D,IAAc7G,OAAOmB,eAAe1B,KAAKqD,EAAS,OAC1DC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQ+D,IACzC,MAAf/D,EAAQgE,KAAe9G,OAAOmB,eAAe1B,KAAKqD,EAAS,QAC3DC,EAAOC,OAA8B,IAAI+B,MAAMjC,EAAQgE,KACvC,MAAhBhE,EAAQiE,MAAgB/G,OAAOmB,eAAe1B,KAAKqD,EAAS,SAC5DC,EAAOC,OAA8B,IAAI+B,MAAMjC,EAAQiE,MAClC,MAArBjE,EAAQkE,WAAqBhH,OAAOmB,eAAe1B,KAAKqD,EAAS,cACjEC,EAAOC,OAA8B,IAAI+B,MAAMjC,EAAQkE,WACtC,MAAjBlE,EAAQmE,OAAiBjH,OAAOmB,eAAe1B,KAAKqD,EAAS,UAC7DC,EAAOC,OAA8B,IAAI+B,MAAMjC,EAAQmE,OACnC,MAApBnE,EAAQoE,UAAoBlH,OAAOmB,eAAe1B,KAAKqD,EAAS,aAChEC,EAAOC,OAA8B,IAAI+B,MAAMjC,EAAQoE,UACtC,MAAjBpE,EAAQqE,OAAiBnH,OAAOmB,eAAe1B,KAAKqD,EAAS,UAC7DC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQqE,OACxC,MAAhBrE,EAAQsE,MAAgBpH,OAAOmB,eAAe1B,KAAKqD,EAAS,SAC5DC,EAAOC,OAA8B,IAAIC,OAAOH,EAAQsE,MAClC,MAAtBtE,EAAQuE,YAAsBrH,OAAOmB,eAAe1B,KAAKqD,EAAS,eAClEC,EAAOC,OAA8B,IAAI4C,MAAM9C,EAAQuE,YACpDtE,GAYX6D,EAAS1D,gBAAkB,SAAyBJ,EAASC,GACzD,OAAOJ,KAAKE,OAAOC,EAASC,GAAQI,UAcxCyD,EAASxD,OAAS,SAAgBC,EAAQX,GAChCW,aAAkB7B,IACpB6B,EAAS7B,EAAQZ,OAAOyC,IAE5B,IADA,IAAIC,OAAiBC,IAAXb,EAAuBW,EAAOG,IAAMH,EAAOI,IAAMf,EAAQI,EAAU,IAAIhB,EAAME,UAAU4E,SAC1FvD,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQ+D,GAAKxD,EAAOJ,SACpB,MACJ,KAAK,EACDH,EAAQgE,IAAMzD,EAAO0B,QACrB,MACJ,KAAK,EACDjC,EAAQiE,KAAO1D,EAAO0B,QACtB,MACJ,KAAK,EACDjC,EAAQkE,UAAY3D,EAAO0B,QAC3B,MACJ,KAAK,EACDjC,EAAQmE,MAAQ5D,EAAO0B,QACvB,MACJ,KAAK,EACDjC,EAAQoE,SAAW7D,EAAO0B,QAC1B,MACJ,KAAK,EACDjC,EAAQqE,MAAQ9D,EAAOJ,SACvB,MACJ,KAAK,EACDH,EAAQsE,KAAO/D,EAAOJ,SACtB,MACJ,KAAK,EACDH,EAAQuE,WAAahE,EAAOuC,QAC5B,MACJ,QACIvC,EAAOM,SAAe,EAAND,IAIxB,OAAOZ,GAaX8D,EAAShD,gBAAkB,SAAyBP,GAGhD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBV,KAAKS,OAAOC,EAAQA,EAAOL,WAWtC4D,EAAS/C,OAAS,SAAgBf,GAC9B,MAAuB,iBAAnB,IAAOA,EAAP,cAAOA,KAAoC,OAAZA,EACxB,kBACO,MAAdA,EAAQ+D,IAAc/D,EAAQ3B,eAAe,QACxCS,EAAMkC,SAAShB,EAAQ+D,IACjB,sBACI,MAAf/D,EAAQgE,KAAehE,EAAQ3B,eAAe,SACzCS,EAAMoD,UAAUlC,EAAQgE,KAClB,wBACK,MAAhBhE,EAAQiE,MAAgBjE,EAAQ3B,eAAe,UAC1CS,EAAMoD,UAAUlC,EAAQiE,MAClB,yBACU,MAArBjE,EAAQkE,WAAqBlE,EAAQ3B,eAAe,eAC/CS,EAAMoD,UAAUlC,EAAQkE,WAClB,8BACM,MAAjBlE,EAAQmE,OAAiBnE,EAAQ3B,eAAe,WAC3CS,EAAMoD,UAAUlC,EAAQmE,OAClB,0BACS,MAApBnE,EAAQoE,UAAoBpE,EAAQ3B,eAAe,cAC9CS,EAAMoD,UAAUlC,EAAQoE,UAClB,6BACM,MAAjBpE,EAAQqE,OAAiBrE,EAAQ3B,eAAe,WAC3CS,EAAMkC,SAAShB,EAAQqE,OACjB,yBACK,MAAhBrE,EAAQsE,MAAgBtE,EAAQ3B,eAAe,UAC1CS,EAAMkC,SAAShB,EAAQsE,MACjB,wBACW,MAAtBtE,EAAQuE,YAAsBvE,EAAQ3B,eAAe,iBAChDS,EAAMoD,UAAUlC,EAAQuE,aAAiBvE,EAAQuE,YAAczF,EAAMoD,UAAUlC,EAAQuE,WAAWxB,MAAQjE,EAAMoD,UAAUlC,EAAQuE,WAAWvB,OACvI,oCACR,MAWXc,EAAS7C,WAAa,SAAoB/C,GACtC,GAAIA,aAAkBc,EAAME,UAAU4E,SAClC,OAAO5F,EACX,IAAI8B,EAAU,IAAIhB,EAAME,UAAU4E,SA0BlC,OAzBiB,MAAb5F,EAAO6F,KACP/D,EAAQ+D,GAAK7C,OAAOhD,EAAO6F,KACb,MAAd7F,EAAO8F,MACPhE,EAAQgE,IAAmB,EAAb9F,EAAO8F,KACN,MAAf9F,EAAO+F,OACPjE,EAAQiE,KAAqB,EAAd/F,EAAO+F,MACF,MAApB/F,EAAOgG,YACPlE,EAAQkE,UAA+B,EAAnBhG,EAAOgG,WACX,MAAhBhG,EAAOiG,QACPnE,EAAQmE,MAAuB,EAAfjG,EAAOiG,OACJ,MAAnBjG,EAAOkG,WACPpE,EAAQoE,SAA6B,EAAlBlG,EAAOkG,UACV,MAAhBlG,EAAOmG,QACPrE,EAAQqE,MAAQnD,OAAOhD,EAAOmG,QACf,MAAfnG,EAAOoG,OACPtE,EAAQsE,KAAOpD,OAAOhD,EAAOoG,OACR,MAArBpG,EAAOqG,aACHzF,EAAM8D,MACL5C,EAAQuE,WAAazF,EAAM8D,KAAKK,UAAU/E,EAAOqG,aAAarB,UAAW,EACxC,iBAAtBhF,EAAOqG,WACnBvE,EAAQuE,WAAapB,SAASjF,EAAOqG,WAAY,IACf,iBAAtBrG,EAAOqG,WACnBvE,EAAQuE,WAAarG,EAAOqG,WACM,WAA7B,EAAOrG,EAAOqG,cACnBvE,EAAQuE,WAAa,IAAIzF,EAAMsE,SAASlF,EAAOqG,WAAWxB,MAAQ,EAAG7E,EAAOqG,WAAWvB,OAAS,GAAGK,aACpGrD,GAYX8D,EAAS3C,SAAW,SAAkBnB,EAASoB,GACtCA,IACDA,EAAU,IACd,IAAIlD,EAAS,GACb,GAAIkD,EAAQC,SASR,GARAnD,EAAO6F,GAAK,GACZ7F,EAAO8F,IAAM,EACb9F,EAAO+F,KAAO,EACd/F,EAAOgG,UAAY,EACnBhG,EAAOiG,MAAQ,EACfjG,EAAOkG,SAAW,EAClBlG,EAAOmG,MAAQ,GACfnG,EAAOoG,KAAO,GACVxF,EAAM8D,KAAM,CACZ,IAAIU,EAAO,IAAIxE,EAAM8D,KAAK,EAAG,GAAG,GAChC1E,EAAOqG,WAAanD,EAAQmC,QAAUrC,OAASoC,EAAKE,WAAapC,EAAQmC,QAAUE,OAASH,EAAKD,WAAaC,OAE9GpF,EAAOqG,WAAanD,EAAQmC,QAAUrC,OAAS,IAAM,EAuB7D,OArBkB,MAAdlB,EAAQ+D,IAAc/D,EAAQ3B,eAAe,QAC7CH,EAAO6F,GAAK/D,EAAQ+D,IACL,MAAf/D,EAAQgE,KAAehE,EAAQ3B,eAAe,SAC9CH,EAAO8F,IAAMhE,EAAQgE,KACL,MAAhBhE,EAAQiE,MAAgBjE,EAAQ3B,eAAe,UAC/CH,EAAO+F,KAAOjE,EAAQiE,MACD,MAArBjE,EAAQkE,WAAqBlE,EAAQ3B,eAAe,eACpDH,EAAOgG,UAAYlE,EAAQkE,WACV,MAAjBlE,EAAQmE,OAAiBnE,EAAQ3B,eAAe,WAChDH,EAAOiG,MAAQnE,EAAQmE,OACH,MAApBnE,EAAQoE,UAAoBpE,EAAQ3B,eAAe,cACnDH,EAAOkG,SAAWpE,EAAQoE,UACT,MAAjBpE,EAAQqE,OAAiBrE,EAAQ3B,eAAe,WAChDH,EAAOmG,MAAQrE,EAAQqE,OACP,MAAhBrE,EAAQsE,MAAgBtE,EAAQ3B,eAAe,UAC/CH,EAAOoG,KAAOtE,EAAQsE,MACA,MAAtBtE,EAAQuE,YAAsBvE,EAAQ3B,eAAe,gBACnB,iBAAvB2B,EAAQuE,WACfrG,EAAOqG,WAAanD,EAAQmC,QAAUrC,OAASA,OAAOlB,EAAQuE,YAAcvE,EAAQuE,WAEpFrG,EAAOqG,WAAanD,EAAQmC,QAAUrC,OAASpC,EAAM8D,KAAKxE,UAAUoF,SAAS7G,KAAKqD,EAAQuE,YAAcnD,EAAQmC,QAAUE,OAAS,IAAI3E,EAAMsE,SAASpD,EAAQuE,WAAWxB,MAAQ,EAAG/C,EAAQuE,WAAWvB,OAAS,GAAGK,WAAarD,EAAQuE,YACzOrG,GAUX4F,EAAS1F,UAAUkD,OAAS,WACxB,OAAOzB,KAAK0B,YAAYJ,SAAStB,KAAMrB,EAAUO,KAAKyC,gBAGnDsC,EAvXW,GA0XtB5E,EAAUsF,YAAe,WAiBrB,SAASA,EAAY9E,GAEjB,GADAG,KAAK4E,MAAQ,GACT/E,EACA,IAAK,IAAIC,EAAOzC,OAAOyC,KAAKD,GAAalD,EAAI,EAAGA,EAAImD,EAAKC,SAAUpD,EACpC,MAAvBkD,EAAWC,EAAKnD,MAChBqD,KAAKF,EAAKnD,IAAMkD,EAAWC,EAAKnD,KAuLhD,OA9KAgI,EAAYpG,UAAUqG,MAAQ3F,EAAM4F,WAUpCF,EAAY1G,OAAS,SAAgB4B,GACjC,OAAO,IAAI8E,EAAY9E,IAY3B8E,EAAYzE,OAAS,SAAgBC,EAASC,GAG1C,GAFKA,IACDA,EAASrB,EAAQd,UACA,MAAjBkC,EAAQyE,OAAiBzE,EAAQyE,MAAM7E,OACvC,IAAK,IAAIpD,EAAI,EAAGA,EAAIwD,EAAQyE,MAAM7E,SAAUpD,EACxCwC,EAAME,UAAU4E,SAAS/D,OAAOC,EAAQyE,MAAMjI,GAAIyD,EAAOC,OAA8B,IAAIyE,QAAQtE,SAC3G,OAAOJ,GAYXuE,EAAYpE,gBAAkB,SAAyBJ,EAASC,GAC5D,OAAOJ,KAAKE,OAAOC,EAASC,GAAQI,UAcxCmE,EAAYlE,OAAS,SAAgBC,EAAQX,GACnCW,aAAkB7B,IACpB6B,EAAS7B,EAAQZ,OAAOyC,IAE5B,IADA,IAAIC,OAAiBC,IAAXb,EAAuBW,EAAOG,IAAMH,EAAOI,IAAMf,EAAQI,EAAU,IAAIhB,EAAME,UAAUsF,YAC1FjE,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACKZ,EAAQyE,OAASzE,EAAQyE,MAAM7E,SACjCI,EAAQyE,MAAQ,IACpBzE,EAAQyE,MAAMG,KAAK5F,EAAME,UAAU4E,SAASxD,OAAOC,EAAQA,EAAOL,WAClE,MACJ,QACIK,EAAOM,SAAe,EAAND,IAIxB,OAAOZ,GAaXwE,EAAY1D,gBAAkB,SAAyBP,GAGnD,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBV,KAAKS,OAAOC,EAAQA,EAAOL,WAWtCsE,EAAYzD,OAAS,SAAgBf,GACjC,GAAuB,iBAAnB,IAAOA,EAAP,cAAOA,KAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAqB,MAAjBA,EAAQyE,OAAiBzE,EAAQ3B,eAAe,SAAU,CAC1D,IAAKwG,MAAMC,QAAQ9E,EAAQyE,OACvB,MAAO,wBACX,IAAK,IAAIjI,EAAI,EAAGA,EAAIwD,EAAQyE,MAAM7E,SAAUpD,EAAG,CAC3C,IAAIuI,EAAQ/F,EAAME,UAAU4E,SAAS/C,OAAOf,EAAQyE,MAAMjI,IAC1D,GAAIuI,EACA,MAAO,SAAWA,GAG9B,OAAO,MAWXP,EAAYvD,WAAa,SAAoB/C,GACzC,GAAIA,aAAkBc,EAAME,UAAUsF,YAClC,OAAOtG,EACX,IAAI8B,EAAU,IAAIhB,EAAME,UAAUsF,YAClC,GAAItG,EAAOuG,MAAO,CACd,IAAKI,MAAMC,QAAQ5G,EAAOuG,OACtB,MAAMO,UAAU,gDACpBhF,EAAQyE,MAAQ,GAChB,IAAK,IAAIjI,EAAI,EAAGA,EAAI0B,EAAOuG,MAAM7E,SAAUpD,EAAG,CAC1C,GAA+B,WAA3B,EAAO0B,EAAOuG,MAAMjI,IACpB,MAAMwI,UAAU,iDACpBhF,EAAQyE,MAAMjI,GAAKwC,EAAME,UAAU4E,SAAS7C,WAAW/C,EAAOuG,MAAMjI,KAG5E,OAAOwD,GAYXwE,EAAYrD,SAAW,SAAkBnB,EAASoB,GACzCA,IACDA,EAAU,IACd,IAAIlD,EAAS,GAGb,IAFIkD,EAAQ6D,QAAU7D,EAAQC,YAC1BnD,EAAOuG,MAAQ,IACfzE,EAAQyE,OAASzE,EAAQyE,MAAM7E,OAAQ,CACvC1B,EAAOuG,MAAQ,GACf,IAAK,IAAIS,EAAI,EAAGA,EAAIlF,EAAQyE,MAAM7E,SAAUsF,EACxChH,EAAOuG,MAAMS,GAAKlG,EAAME,UAAU4E,SAAS3C,SAASnB,EAAQyE,MAAMS,GAAI9D,GAE9E,OAAOlD,GAUXsG,EAAYpG,UAAUkD,OAAS,WAC3B,OAAOzB,KAAK0B,YAAYJ,SAAStB,KAAMrB,EAAUO,KAAKyC,gBAGnDgD,EA7Mc,GAwNzBtF,EAAUiG,WAAc,WACpB,IAAMhG,EAAa,GAAIC,EAASlC,OAAOY,OAAOqB,GAI9C,OAHAC,EAAOD,EAAW,GAAK,qBAAuB,EAC9CC,EAAOD,EAAW,GAAK,cAAgB,EACvCC,EAAOD,EAAW,GAAK,YAAc,EAC9BC,EALa,GAQxBF,EAAUkG,oBAAuB,WAiB7B,SAASA,EAAoB1F,GACzB,GAAIA,EACA,IAAK,IAAIC,EAAOzC,OAAOyC,KAAKD,GAAalD,EAAI,EAAGA,EAAImD,EAAKC,SAAUpD,EACpC,MAAvBkD,EAAWC,EAAKnD,MAChBqD,KAAKF,EAAKnD,IAAMkD,EAAWC,EAAKnD,KAqLhD,OA5KA4I,EAAoBhH,UAAUiH,OAAS,EAUvCD,EAAoBtH,OAAS,SAAgB4B,GACzC,OAAO,IAAI0F,EAAoB1F,IAYnC0F,EAAoBrF,OAAS,SAAgBC,EAASC,GAKlD,OAJKA,IACDA,EAASrB,EAAQd,UACC,MAAlBkC,EAAQqF,QAAkBnI,OAAOmB,eAAe1B,KAAKqD,EAAS,WAC9DC,EAAOC,OAA8B,GAAG+B,MAAMjC,EAAQqF,QACnDpF,GAYXmF,EAAoBhF,gBAAkB,SAAyBJ,EAASC,GACpE,OAAOJ,KAAKE,OAAOC,EAASC,GAAQI,UAcxC+E,EAAoB9E,OAAS,SAAgBC,EAAQX,GAC3CW,aAAkB7B,IACpB6B,EAAS7B,EAAQZ,OAAOyC,IAE5B,IADA,IAAIC,OAAiBC,IAAXb,EAAuBW,EAAOG,IAAMH,EAAOI,IAAMf,EAAQI,EAAU,IAAIhB,EAAME,UAAUkG,oBAC1F7E,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDZ,EAAQqF,OAAS9E,EAAO0B,QACxB,MACJ,QACI1B,EAAOM,SAAe,EAAND,IAIxB,OAAOZ,GAaXoF,EAAoBtE,gBAAkB,SAAyBP,GAG3D,OAFMA,aAAkB7B,IACpB6B,EAAS,IAAI7B,EAAQ6B,IAClBV,KAAKS,OAAOC,EAAQA,EAAOL,WAWtCkF,EAAoBrE,OAAS,SAAgBf,GACzC,GAAuB,iBAAnB,IAAOA,EAAP,cAAOA,KAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAsB,MAAlBA,EAAQqF,QAAkBrF,EAAQ3B,eAAe,UACjD,OAAQ2B,EAAQqF,QAChB,QACI,MAAO,8BACX,KAAK,EACL,KAAK,EACL,KAAK,GAGT,OAAO,MAWXD,EAAoBnE,WAAa,SAAoB/C,GACjD,GAAIA,aAAkBc,EAAME,UAAUkG,oBAClC,OAAOlH,EACX,IAAI8B,EAAU,IAAIhB,EAAME,UAAUkG,oBAClC,OAAQlH,EAAOmH,QACf,IAAK,oBACL,KAAK,EACDrF,EAAQqF,OAAS,EACjB,MACJ,IAAK,aACL,KAAK,EACDrF,EAAQqF,OAAS,EACjB,MACJ,IAAK,WACL,KAAK,EACDrF,EAAQqF,OAAS,EAGrB,OAAOrF,GAYXoF,EAAoBjE,SAAW,SAAkBnB,EAASoB,GACjDA,IACDA,EAAU,IACd,IAAIlD,EAAS,GAKb,OAJIkD,EAAQC,WACRnD,EAAOmH,OAASjE,EAAQkE,QAAUpE,OAAS,oBAAsB,GAC/C,MAAlBlB,EAAQqF,QAAkBrF,EAAQ3B,eAAe,YACjDH,EAAOmH,OAASjE,EAAQkE,QAAUpE,OAASlC,EAAME,UAAUiG,WAAWnF,EAAQqF,QAAUrF,EAAQqF,QAC7FnH,GAUXkH,EAAoBhH,UAAUkD,OAAS,WACnC,OAAOzB,KAAK0B,YAAYJ,SAAStB,KAAMrB,EAAUO,KAAKyC,gBAGnD4D,EA1MsB,GA6M1BlG,EA/rEiC,I,8ECP5C,IAAIqG,EAAS,CAETC,WAAW,G,EAqCXD,S,EACAE,IAnCJ,SAAaC,EAAMC,GACXJ,EAAOC,WACPI,QAAQH,IAAI,IAAMC,EAAO,KAAOC,I,EAkCpCE,UA9BJ,SAAmBC,EAAKC,EAAOC,GAC3BF,EAAIC,GAAgB,IAANC,EACdF,EAAIC,EAAQ,IAAa,MAANC,IAAiB,G,EA6BpCC,UA1BJ,SAAmBH,EAAKC,GACpB,OAAOD,EAAIC,IAAUD,EAAIC,EAAQ,IAAM,I,EA0BvCG,UAnBJ,SAAmBJ,EAAKC,EAAOC,GAC3BF,EAAIC,GAAgB,IAANC,EACdF,EAAIC,EAAQ,IAAa,MAANC,IAAqB,EACxCF,EAAIC,EAAQ,IAAa,SAANC,IAAqB,GACxCF,EAAIC,EAAQ,IAAa,WAANC,IAAqB,I,EAgBxCG,UAxBJ,SAAmBL,EAAKC,GACpB,OAAOD,EAAIC,IAAUD,EAAIC,EAAQ,IAAM,IAAMD,EAAIC,EAAQ,IAAM,KAAOD,EAAIC,EAAQ,IAAM,K,EAwBxFK,YAdJ,SAAqBC,EAAMC,GACvB,IAAIR,EAAM,IAAIS,WAAWF,EAAKzG,OAAS0G,EAAK1G,QAG5C,OAFAkG,EAAIU,IAAIH,EAAM,GACdP,EAAIU,IAAIF,EAAMD,EAAKzG,QACZkG,I,sOCnCX,WACA,OACA,OAEIW,EAAS,K,EAqETlB,gB,EAIAmB,e,EAGAC,KAxEJ,SAAcC,IACV,IAAAnB,KAAI,OAAQ,uBAEIhF,MAAZmG,GAAqC,IAAZA,IAIf,MAAVH,GACAA,EAAOI,SAGXJ,EAAS,IAAIK,iBAAeF,IACrBG,Y,EA6DPC,iBA1DJ,SAA0BC,EAAOC,EAAUC,EAAQC,GAC/CX,EAAOY,wBAA0BJ,EACjCR,EAAOa,qBAAuBJ,EAC9BT,EAAOc,mBAAqBJ,EAC5BV,EAAOe,mBAAqBJ,G,EAuD5BK,aApDJ,SAAsBC,EAASC,GAE3B,OADUlB,EAAOgB,aAAaC,EAASC,I,EAoDvCC,aAhDJ,SAAsBF,EAASC,EAAQE,GACnCpB,EAAOmB,aAAaF,EAASC,EAAQE,I,EAgDrCC,eA7CJ,SAAwBJ,EAASC,EAAQI,EAAIF,GACzCpB,EAAOuB,QAAQN,EAASC,EAAQI,EAAIF,I,EA8CpCI,aA1CJ,WACI,IAAIC,GAAc,EAIlB,OAHGzB,IACCyB,EAAczB,EAAO0B,cAElBD,G,EAsCPE,WAnCJ,WACI,OAAG3B,EACQA,EAAO7E,QAEX,I,EAgCPyG,WA7BJ,WACI,OAAG5B,EACQA,EAAO6B,WAEX,I,EA0BPC,eAvBJ,WACI,OAAO9B,I,uXCnEX,OACA,OAOO,IAAI+B,EAAYA,EAAZA,UAAYA,GAAaC,OAAOD,WAAaC,OAAOC,aACpDC,EAAYA,EAAZA,UAAY,E,EAIV7B,e,WAIT,WAAY8B,I,4FAAM,UACd,IAAAnD,KAAI,OAAQ,mCAEZ5F,KAAKgJ,SAAWD,EAChB/I,KAAKiJ,GAAK,KACVjJ,KAAKkJ,OAAS,KAGdlJ,KAAK+B,QAAU,QAGf/B,KAAKsI,cAAe,EAGpBtI,KAAKmJ,WAAa,KAElBnJ,KAAKoJ,UAAY,GAEjBpJ,KAAKqJ,gBAAkB,GAEvBrJ,KAAKsJ,cAAe,EAEpBtJ,KAAKuJ,eAAiB,EAEtBvJ,KAAKwJ,YAAa,EAElBxJ,KAAKwH,wBAA0B,KAC/BxH,KAAKyH,qBAAuB,KAC5BzH,KAAK0H,mBAAqB,KAC1B1H,KAAK2H,mBAAqB,KAE1B3H,KAAKyJ,WAAa,GAClBzJ,KAAK0J,W,6CAGL1J,KAAKyJ,WAAa,GAElB,IADA,IAAIE,EAActM,OAAOyC,KAAK+G,YAAGrH,UACzB7C,EAAI,EAAGA,EAAIgN,EAAY5J,OAAQpD,IACnCqD,KAAKyJ,WAAW1E,KAAK,IAEzB,IAAI6E,EAAiBvM,OAAOyC,KAAK+G,YAAGnH,aACpC,IAAQ/C,EAAI,EAAGA,EAAIiN,EAAe7J,OAAQpD,IAAI,CAC1C,IAAIkN,EAAY,KACZC,EAAY,KACR,GAALnN,IACCkN,EAAYhD,YAAGjE,kBAEX,GAALjG,IACCmN,EAAYjD,YAAGhE,mBAEX,GAALlG,IACCmN,EAAYjD,YAAGjH,aAEX,GAALjD,IACCmN,EAAYjD,YAAGhD,QAEnB7D,KAAKyJ,WAAW,GAAG1E,KAAK,CAAC,KAAK8E,EAAUC,IAE5C,IAAIC,EAAoB1M,OAAOyC,KAAK+G,YAAGpH,gBACvC,IAAQ9C,EAAI,EAAGA,EAAIoN,EAAkBhK,OAAQpD,IAAI,CACzCkN,EAAY,KACZC,EAAY,KACR,GAALnN,IACCkN,EAAYhD,YAAGjF,cAEX,GAALjF,IACCmN,EAAYjD,YAAGtE,eAEnBvC,KAAKyJ,WAAW,GAAG1E,KAAK,CAAC,KAAK8E,EAAUC,IAE5C,IAAIE,EAAiB3M,OAAOyC,KAAK+G,YAAGlH,aACpC,IAAQhD,EAAI,EAAGA,EAAIqN,EAAejK,OAAQpD,IAAI,CACtCkN,EAAY,KACZC,EAAY,KACR,GAALnN,IACCmN,EAAYjD,YAAGlC,aAEX,GAALhI,IACCmN,EAAYjD,YAAG5C,UAEX,GAALtH,IACCkN,EAAYhD,YAAGtB,qBAEnBvF,KAAKyJ,WAAW,GAAG1E,KAAK,CAAC,KAAK8E,EAAUC,KAE5C,IAAAlE,KAAI,SAAS5F,KAAKyJ,WAAW1J,U,mCAEpB8H,EAASC,EAAQE,GACvBhI,KAAKyJ,WAAW5B,IAAa7H,KAAKyJ,WAAW5B,GAAUC,GACtD9H,KAAKyJ,WAAW5B,GAAUC,GAAS,GAAKE,GAExC,IAAApC,KAAI,WAAW,M,kCAGXqE,EAAOhE,GACf,IAAIiC,EAAM,GACPjC,IACCiC,EAAMlI,KAAKyJ,WAAWQ,EAAOpC,UAAUoC,EAAOnC,SAAS,GAAGrH,OAAOwF,EAAIgE,EAAOpJ,MAE7Eb,KAAKyJ,WAAWQ,EAAOpC,UAAUoC,EAAOnC,SAAS,GAChD9H,KAAKyJ,WAAWQ,EAAOpC,UAAUoC,EAAOnC,SAAS,GAAGI,IAEpD,IAAAtC,KAAI,YAAY,M,gCAId,WACN,IAAG5F,KAAKsI,aAAR,EAGA,IAAA1C,KAAI,OAAQ,qBAAuB5F,KAAKgJ,SAAW,QAEnDhJ,KAAKiJ,GAAK,IAAIN,EAAU3I,KAAKgJ,UAE7BhJ,KAAKiJ,GAAGiB,WAAa,cACrB,IAAIC,EAAOnK,KACXA,KAAKiJ,GAAGmB,OAAS,SAACC,GACd,EAAK/B,cAAe,EACpB,EAAKkB,YAAa,EAEfW,EAAK3C,yBACJ2C,EAAK3C,wBAAwB6C,IAIrCrK,KAAKiJ,GAAGqB,UAAY,SAACD,GAEjBF,EAAKI,QAAQF,EAAIG,KAAMH,EAAII,QAE/BzK,KAAKiJ,GAAGyB,QAAU,SAACL,GAEfF,EAAK7B,cAAe,GACpB,IAAA1C,KAAI,OAAQ,aAAeuE,EAAKnB,SAAW,YAC3C,IAAApD,KAAI,oBAAqB,MAE7B5F,KAAKiJ,GAAG0B,QAAU,SAASN,GAEvBF,EAAK7B,cAAe,GACpB,IAAA1C,KAAI,OAAQ,aAAeuE,EAAKnB,SAAW,YAC3C,IAAApD,KAAI,qBAAsB,KAC1BuE,EAAKlB,GAAK,KACPkB,EAAKxC,oBAAyC,GAAnBwC,EAAKX,YAC/BW,EAAKxC,mBAAmB0C,GAE5BF,EAAKS,gBACLT,EAAKU,gB,kCAKT7K,KAAKuJ,kBACL,IAAA3D,KAAI,0BAA0B5F,KAAKuJ,gBAChCvJ,KAAKuJ,gBAAkB,GAG1BvJ,KAAKkH,Y,4EAQIW,EAASC,GAClB,IAAIgD,SAIJ,OAHG9K,KAAKyJ,WAAW5B,GAAUC,IAAY9H,KAAKyJ,WAAW5B,GAAUC,GAAS,KACxEgD,EAAM9K,KAAKyJ,WAAW5B,GAAUC,GAAS,GAAG7J,UAEzC6M,I,+BAIP,IAAAlF,KAAI,yDAA0D,KAC/C,MAAX5F,KAAKiJ,MACL,IAAArD,KAAI,mBAAmB,KACvB5F,KAAKiJ,GAAGjC,SACR,IAAApB,KAAI,iBAAiB,MAGH,MAAnB5F,KAAKmJ,YACJnJ,KAAK+K,mB,uCAKT,IAAAnF,KAAI,yDAA0D,KAC/C,MAAX5F,KAAKiJ,KACLjJ,KAAKwJ,YAAa,EAClBxJ,KAAKuJ,eAAiB,GACtB,IAAA3D,KAAI,mBAAmB,KACvB5F,KAAKiJ,GAAGjC,SACR,IAAApB,KAAI,iBAAiB,MAGH,MAAnB5F,KAAKmJ,YACJnJ,KAAK+K,mB,8BAILlD,EAAUC,EAASI,EAAK8C,GAC5B,GAAe,MAAXhL,KAAKiJ,GAAY,CACjB,IAAIhD,EAAMjG,KAAKyJ,WAAW5B,GAAUC,GAAS,GAAG5H,OAAOgI,GAAK+C,SAExDhB,EAAS,IAAIvD,WAAWoC,GAC5BmB,EAAO,GAAKpC,EACZoC,EAAO,GAAKnC,GACZ,IAAA9B,WAAUiE,EAAQ,EAAGhE,EAAIlG,SACzB,IAAAsG,WAAU4D,EAAQ,EAAG,IACrB,IAAAjE,WAAUiE,EAAQ,EAAG,GACrBjK,KAAKiJ,GAAGiC,MAAK,IAAA3E,aAAY0D,EAAQhE,O,8BAKjCuE,EAAMC,GACVzK,KAAKmL,SAASX,K,kCAENvE,GACR,MAAO,CACH4B,SAAU5B,EAAI,GACd6B,QAAS7B,EAAI,GACbpF,KAAK,IAAAuF,WAAUH,EAAK,M,+BAInBuE,GASL,GARAxK,KAAKkJ,OAAS,KACK,MAAflJ,KAAKkJ,OACLlJ,KAAKkJ,OAAS,IAAIxC,WAAW8D,GAG7BxK,KAAKkJ,QAAS,IAAA3C,aAAYvG,KAAKkJ,OAAQ,IAAIxC,WAAW8D,IAGtDxK,KAAKkJ,OAAOnJ,QAAU+I,EAAW,CACjC,IAAImB,EAASjK,KAAKoL,YAAYpL,KAAKkJ,QACnC,GAAIe,EAAOpJ,IAAMiI,GAAa9I,KAAKkJ,OAAOnJ,OAEtC,GAAIkK,EAAOpJ,IAAM,EAAG,CAChB,IAAIoF,EAAMjG,KAAKkJ,OAAOmC,SAASvC,EAAWmB,EAAOpJ,IAAMiI,GACvD9I,KAAKsL,MAAMrB,EAAQhE,QAGnBjG,KAAKsL,MAAMrB,EAAQ,UAItB,IAAIA,EAAOpJ,IAAMiI,EAAY9I,KAAKkJ,OAAOnJ,OAC1C,OAGA,GAAIkK,EAAOpJ,IAAM,EAAG,CAChB,IAAIoF,EAAMjG,KAAKkJ,OAAOmC,SAASvC,EAAWmB,EAAOpJ,IAAMiI,GACvD9I,KAAKsL,MAAMrB,EAAQhE,QAGnBjG,KAAKsL,MAAMrB,EAAQ,MAGvBjK,KAAKkJ,OAASlJ,KAAKkJ,OAAOmC,SAASvC,EAAYmB,EAAOpJ,IAAKb,KAAKkJ,OAAOnJ,OAASkK,EAAOpJ,S,4BAI7FoJ,EAAQhE,GAEV,GAAIgE,EAAOpC,UAAYhB,YAAGrH,SAAS+L,UAAYtB,EAAOnC,SAAWjB,YAAGnH,YAAY8L,gBAAgB,CAE5F,IAAItD,EAAMrB,YAAGhE,kBAAkBpC,OAAOwF,EAAKgE,EAAOpJ,KAClDb,KAAKyL,oBAAoBvD,QAEtB+B,EAAOpC,UAAYhB,YAAGrH,SAASkM,cAC1BzB,EAAOnC,SAAWjB,YAAGpH,eAAekM,oBAAsB1B,EAAOnC,SAAWjB,YAAGpH,eAAemM,aAC9F5L,KAAK6L,sBAGb7L,KAAK8L,YAAY7B,EAAQhE,K,2CAO7B,GAAsB,MAAnBjG,KAAKmJ,WAAmB,CACvB,IAAI4C,EAAQ,EACR5B,EAAOnK,KACXmK,EAAK6B,kBACLhM,KAAKmJ,WAAa8C,aAAY,aAC1BF,EACW5B,EAAKd,iBAAwC,GAArBc,EAAKb,gBAEpC,IAAA1D,KAAI,+CAAgD,KACpDmG,EAAQ,EACR5B,EAAKY,iBACLZ,EAAK7B,cAAe,EACpB6B,EAAKnD,QACLmD,EAAKV,WAAW5C,YAAGrH,SAAS+L,UAAU1E,YAAGnH,YAAYwM,WAAW,MAEjEH,EAAQ5B,EAAKf,YACZ2C,EAAQ,EACR5B,EAAK6B,qBAEX,Q,wCAMN,GAAwB,GAArBhM,KAAKsI,aAAqB,EACzB,IAAA1C,KAAI,iBAAkB,KACtB5F,KAAKsJ,cAAe,EACpB,IAAIpB,EAAMlI,KAAK4H,aAAaf,YAAGrH,SAAS+L,SAAU1E,YAAGnH,YAAYyM,iBACjEjE,EAAInG,QAAU/B,KAAK+B,QACnB/B,KAAKmI,QAAQtB,YAAGrH,SAAS+L,SAAU1E,YAAGnH,YAAYyM,gBAAiBjE,M,0CAIvDA,GAexB,IAAyBkE,EACjBC,EACAC,EACAC,EACAC,EACAC,EACA1P,EACA2B,GArBA,IAAAkH,KAAI,4BAcawG,EAd8BlE,EAAIpF,QAenDuJ,EAAO,IAAIK,KAAiB,IAAZN,GAChBE,EAAID,EAAKM,cAAgB,IACzBJ,GAAKF,EAAKO,WAAW,EAAI,GAAK,KAAKP,EAAKO,WAAW,GAAKP,EAAKO,WAAW,GAAK,IAC7EJ,EAAIH,EAAKQ,UAAY,IACrBJ,EAAIJ,EAAKS,WAAa,IACtB/P,EAAIsP,EAAKU,aAAe,IACxBrO,EAAI2N,EAAKW,aACNV,EAAEC,EAAEC,EAAEC,EAAE1P,EAAE2B,IArBbsB,KAAKsJ,cAAe,I,uCAGjBtJ,KAAKmJ,cACJ,IAAAvD,KAAI,mBAAoB,KACxBqH,cAAcjN,KAAKmJ,YACnBnJ,KAAKmJ,WAAa,U","file":"dtsdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","const $protobuf = protobuf;\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const dtsdkserv = $root.dtsdkserv = (() => {\n\n    /**\n     * Namespace dtsdkserv.\n     * @exports dtsdkserv\n     * @namespace\n     */\n    const dtsdkserv = {};\n\n    /**\n     * MainType enum.\n     * @name dtsdkserv.MainType\n     * @enum {number}\n     * @property {number} MainBase=0 MainBase value\n     * @property {number} MainAccount=1 MainAccount value\n     * @property {number} MainGame=2 MainGame value\n     */\n    dtsdkserv.MainType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"MainBase\"] = 0;\n        values[valuesById[1] = \"MainAccount\"] = 1;\n        values[valuesById[2] = \"MainGame\"] = 2;\n        return values;\n    })();\n\n    /**\n     * SubAccountType enum.\n     * @name dtsdkserv.SubAccountType\n     * @enum {number}\n     * @property {number} SubLoginReq=0 SubLoginReq value\n     * @property {number} SubLoginRsp=1 SubLoginRsp value\n     */\n    dtsdkserv.SubAccountType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"SubLoginReq\"] = 0;\n        values[valuesById[1] = \"SubLoginRsp\"] = 1;\n        return values;\n    })();\n\n    /**\n     * SubBaseType enum.\n     * @name dtsdkserv.SubBaseType\n     * @enum {number}\n     * @property {number} SubKeepAliveReq=0 SubKeepAliveReq value\n     * @property {number} SubKeepAliveRsp=1 SubKeepAliveRsp value\n     * @property {number} SubErrRsp=2 SubErrRsp value\n     * @property {number} SubCmdRet=3 SubCmdRet value\n     */\n    dtsdkserv.SubBaseType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"SubKeepAliveReq\"] = 0;\n        values[valuesById[1] = \"SubKeepAliveRsp\"] = 1;\n        values[valuesById[2] = \"SubErrRsp\"] = 2;\n        values[valuesById[3] = \"SubCmdRet\"] = 3;\n        return values;\n    })();\n\n    /**\n     * SubGameType enum.\n     * @name dtsdkserv.SubGameType\n     * @enum {number}\n     * @property {number} SubFreeRedPacketRsp=0 SubFreeRedPacketRsp value\n     * @property {number} SubNewFreeRedPacket=1 SubNewFreeRedPacket value\n     * @property {number} SubChangeScreenRequest=2 SubChangeScreenRequest value\n     */\n    dtsdkserv.SubGameType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"SubFreeRedPacketRsp\"] = 0;\n        values[valuesById[1] = \"SubNewFreeRedPacket\"] = 1;\n        values[valuesById[2] = \"SubChangeScreenRequest\"] = 2;\n        return values;\n    })();\n\n    dtsdkserv.ErrResponse = (function() {\n\n        /**\n         * Properties of an ErrResponse.\n         * @memberof dtsdkserv\n         * @interface IErrResponse\n         * @property {string|null} [errCode] ErrResponse errCode\n         */\n\n        /**\n         * Constructs a new ErrResponse.\n         * @memberof dtsdkserv\n         * @classdesc Represents an ErrResponse.\n         * @implements IErrResponse\n         * @constructor\n         * @param {dtsdkserv.IErrResponse=} [properties] Properties to set\n         */\n        function ErrResponse(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ErrResponse errCode.\n         * @member {string} errCode\n         * @memberof dtsdkserv.ErrResponse\n         * @instance\n         */\n        ErrResponse.prototype.errCode = \"\";\n\n        /**\n         * Creates a new ErrResponse instance using the specified properties.\n         * @function create\n         * @memberof dtsdkserv.ErrResponse\n         * @static\n         * @param {dtsdkserv.IErrResponse=} [properties] Properties to set\n         * @returns {dtsdkserv.ErrResponse} ErrResponse instance\n         */\n        ErrResponse.create = function create(properties) {\n            return new ErrResponse(properties);\n        };\n\n        /**\n         * Encodes the specified ErrResponse message. Does not implicitly {@link dtsdkserv.ErrResponse.verify|verify} messages.\n         * @function encode\n         * @memberof dtsdkserv.ErrResponse\n         * @static\n         * @param {dtsdkserv.IErrResponse} message ErrResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ErrResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.errCode != null && Object.hasOwnProperty.call(message, \"errCode\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errCode);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ErrResponse message, length delimited. Does not implicitly {@link dtsdkserv.ErrResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof dtsdkserv.ErrResponse\n         * @static\n         * @param {dtsdkserv.IErrResponse} message ErrResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ErrResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ErrResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof dtsdkserv.ErrResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {dtsdkserv.ErrResponse} ErrResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ErrResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.dtsdkserv.ErrResponse();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.errCode = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ErrResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof dtsdkserv.ErrResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {dtsdkserv.ErrResponse} ErrResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ErrResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ErrResponse message.\n         * @function verify\n         * @memberof dtsdkserv.ErrResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ErrResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.errCode != null && message.hasOwnProperty(\"errCode\"))\n                if (!$util.isString(message.errCode))\n                    return \"errCode: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an ErrResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof dtsdkserv.ErrResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {dtsdkserv.ErrResponse} ErrResponse\n         */\n        ErrResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.dtsdkserv.ErrResponse)\n                return object;\n            let message = new $root.dtsdkserv.ErrResponse();\n            if (object.errCode != null)\n                message.errCode = String(object.errCode);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ErrResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof dtsdkserv.ErrResponse\n         * @static\n         * @param {dtsdkserv.ErrResponse} message ErrResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ErrResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.errCode = \"\";\n            if (message.errCode != null && message.hasOwnProperty(\"errCode\"))\n                object.errCode = message.errCode;\n            return object;\n        };\n\n        /**\n         * Converts this ErrResponse to JSON.\n         * @function toJSON\n         * @memberof dtsdkserv.ErrResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ErrResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ErrResponse;\n    })();\n\n    dtsdkserv.LoginRequest = (function() {\n\n        /**\n         * Properties of a LoginRequest.\n         * @memberof dtsdkserv\n         * @interface ILoginRequest\n         * @property {string|null} [token] LoginRequest token\n         * @property {string|null} [gameCode] LoginRequest gameCode\n         * @property {string|null} [version] LoginRequest version\n         * @property {boolean|null} [isLogin] LoginRequest isLogin\n         * @property {string|null} [deviceInfo] LoginRequest deviceInfo\n         * @property {number|null} [loadingTime] LoginRequest loadingTime\n         */\n\n        /**\n         * Constructs a new LoginRequest.\n         * @memberof dtsdkserv\n         * @classdesc Represents a LoginRequest.\n         * @implements ILoginRequest\n         * @constructor\n         * @param {dtsdkserv.ILoginRequest=} [properties] Properties to set\n         */\n        function LoginRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LoginRequest token.\n         * @member {string} token\n         * @memberof dtsdkserv.LoginRequest\n         * @instance\n         */\n        LoginRequest.prototype.token = \"\";\n\n        /**\n         * LoginRequest gameCode.\n         * @member {string} gameCode\n         * @memberof dtsdkserv.LoginRequest\n         * @instance\n         */\n        LoginRequest.prototype.gameCode = \"\";\n\n        /**\n         * LoginRequest version.\n         * @member {string} version\n         * @memberof dtsdkserv.LoginRequest\n         * @instance\n         */\n        LoginRequest.prototype.version = \"\";\n\n        /**\n         * LoginRequest isLogin.\n         * @member {boolean} isLogin\n         * @memberof dtsdkserv.LoginRequest\n         * @instance\n         */\n        LoginRequest.prototype.isLogin = false;\n\n        /**\n         * LoginRequest deviceInfo.\n         * @member {string} deviceInfo\n         * @memberof dtsdkserv.LoginRequest\n         * @instance\n         */\n        LoginRequest.prototype.deviceInfo = \"\";\n\n        /**\n         * LoginRequest loadingTime.\n         * @member {number} loadingTime\n         * @memberof dtsdkserv.LoginRequest\n         * @instance\n         */\n        LoginRequest.prototype.loadingTime = 0;\n\n        /**\n         * Creates a new LoginRequest instance using the specified properties.\n         * @function create\n         * @memberof dtsdkserv.LoginRequest\n         * @static\n         * @param {dtsdkserv.ILoginRequest=} [properties] Properties to set\n         * @returns {dtsdkserv.LoginRequest} LoginRequest instance\n         */\n        LoginRequest.create = function create(properties) {\n            return new LoginRequest(properties);\n        };\n\n        /**\n         * Encodes the specified LoginRequest message. Does not implicitly {@link dtsdkserv.LoginRequest.verify|verify} messages.\n         * @function encode\n         * @memberof dtsdkserv.LoginRequest\n         * @static\n         * @param {dtsdkserv.ILoginRequest} message LoginRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoginRequest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);\n            if (message.gameCode != null && Object.hasOwnProperty.call(message, \"gameCode\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.gameCode);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.version);\n            if (message.isLogin != null && Object.hasOwnProperty.call(message, \"isLogin\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isLogin);\n            if (message.deviceInfo != null && Object.hasOwnProperty.call(message, \"deviceInfo\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.deviceInfo);\n            if (message.loadingTime != null && Object.hasOwnProperty.call(message, \"loadingTime\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.loadingTime);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LoginRequest message, length delimited. Does not implicitly {@link dtsdkserv.LoginRequest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof dtsdkserv.LoginRequest\n         * @static\n         * @param {dtsdkserv.ILoginRequest} message LoginRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoginRequest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LoginRequest message from the specified reader or buffer.\n         * @function decode\n         * @memberof dtsdkserv.LoginRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {dtsdkserv.LoginRequest} LoginRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoginRequest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.dtsdkserv.LoginRequest();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.token = reader.string();\n                    break;\n                case 2:\n                    message.gameCode = reader.string();\n                    break;\n                case 3:\n                    message.version = reader.string();\n                    break;\n                case 4:\n                    message.isLogin = reader.bool();\n                    break;\n                case 5:\n                    message.deviceInfo = reader.string();\n                    break;\n                case 6:\n                    message.loadingTime = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LoginRequest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof dtsdkserv.LoginRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {dtsdkserv.LoginRequest} LoginRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoginRequest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LoginRequest message.\n         * @function verify\n         * @memberof dtsdkserv.LoginRequest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LoginRequest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.token != null && message.hasOwnProperty(\"token\"))\n                if (!$util.isString(message.token))\n                    return \"token: string expected\";\n            if (message.gameCode != null && message.hasOwnProperty(\"gameCode\"))\n                if (!$util.isString(message.gameCode))\n                    return \"gameCode: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isString(message.version))\n                    return \"version: string expected\";\n            if (message.isLogin != null && message.hasOwnProperty(\"isLogin\"))\n                if (typeof message.isLogin !== \"boolean\")\n                    return \"isLogin: boolean expected\";\n            if (message.deviceInfo != null && message.hasOwnProperty(\"deviceInfo\"))\n                if (!$util.isString(message.deviceInfo))\n                    return \"deviceInfo: string expected\";\n            if (message.loadingTime != null && message.hasOwnProperty(\"loadingTime\"))\n                if (!$util.isInteger(message.loadingTime))\n                    return \"loadingTime: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LoginRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof dtsdkserv.LoginRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {dtsdkserv.LoginRequest} LoginRequest\n         */\n        LoginRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.dtsdkserv.LoginRequest)\n                return object;\n            let message = new $root.dtsdkserv.LoginRequest();\n            if (object.token != null)\n                message.token = String(object.token);\n            if (object.gameCode != null)\n                message.gameCode = String(object.gameCode);\n            if (object.version != null)\n                message.version = String(object.version);\n            if (object.isLogin != null)\n                message.isLogin = Boolean(object.isLogin);\n            if (object.deviceInfo != null)\n                message.deviceInfo = String(object.deviceInfo);\n            if (object.loadingTime != null)\n                message.loadingTime = object.loadingTime | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LoginRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof dtsdkserv.LoginRequest\n         * @static\n         * @param {dtsdkserv.LoginRequest} message LoginRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LoginRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.token = \"\";\n                object.gameCode = \"\";\n                object.version = \"\";\n                object.isLogin = false;\n                object.deviceInfo = \"\";\n                object.loadingTime = 0;\n            }\n            if (message.token != null && message.hasOwnProperty(\"token\"))\n                object.token = message.token;\n            if (message.gameCode != null && message.hasOwnProperty(\"gameCode\"))\n                object.gameCode = message.gameCode;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                object.version = message.version;\n            if (message.isLogin != null && message.hasOwnProperty(\"isLogin\"))\n                object.isLogin = message.isLogin;\n            if (message.deviceInfo != null && message.hasOwnProperty(\"deviceInfo\"))\n                object.deviceInfo = message.deviceInfo;\n            if (message.loadingTime != null && message.hasOwnProperty(\"loadingTime\"))\n                object.loadingTime = message.loadingTime;\n            return object;\n        };\n\n        /**\n         * Converts this LoginRequest to JSON.\n         * @function toJSON\n         * @memberof dtsdkserv.LoginRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LoginRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LoginRequest;\n    })();\n\n    dtsdkserv.LoginResponse = (function() {\n\n        /**\n         * Properties of a LoginResponse.\n         * @memberof dtsdkserv\n         * @interface ILoginResponse\n         * @property {string|null} [playerName] LoginResponse playerName\n         * @property {string|null} [platformCode] LoginResponse platformCode\n         * @property {string|null} [currency] LoginResponse currency\n         * @property {string|null} [servVersion] LoginResponse servVersion\n         */\n\n        /**\n         * Constructs a new LoginResponse.\n         * @memberof dtsdkserv\n         * @classdesc Represents a LoginResponse.\n         * @implements ILoginResponse\n         * @constructor\n         * @param {dtsdkserv.ILoginResponse=} [properties] Properties to set\n         */\n        function LoginResponse(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LoginResponse playerName.\n         * @member {string} playerName\n         * @memberof dtsdkserv.LoginResponse\n         * @instance\n         */\n        LoginResponse.prototype.playerName = \"\";\n\n        /**\n         * LoginResponse platformCode.\n         * @member {string} platformCode\n         * @memberof dtsdkserv.LoginResponse\n         * @instance\n         */\n        LoginResponse.prototype.platformCode = \"\";\n\n        /**\n         * LoginResponse currency.\n         * @member {string} currency\n         * @memberof dtsdkserv.LoginResponse\n         * @instance\n         */\n        LoginResponse.prototype.currency = \"\";\n\n        /**\n         * LoginResponse servVersion.\n         * @member {string} servVersion\n         * @memberof dtsdkserv.LoginResponse\n         * @instance\n         */\n        LoginResponse.prototype.servVersion = \"\";\n\n        /**\n         * Creates a new LoginResponse instance using the specified properties.\n         * @function create\n         * @memberof dtsdkserv.LoginResponse\n         * @static\n         * @param {dtsdkserv.ILoginResponse=} [properties] Properties to set\n         * @returns {dtsdkserv.LoginResponse} LoginResponse instance\n         */\n        LoginResponse.create = function create(properties) {\n            return new LoginResponse(properties);\n        };\n\n        /**\n         * Encodes the specified LoginResponse message. Does not implicitly {@link dtsdkserv.LoginResponse.verify|verify} messages.\n         * @function encode\n         * @memberof dtsdkserv.LoginResponse\n         * @static\n         * @param {dtsdkserv.ILoginResponse} message LoginResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoginResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.playerName != null && Object.hasOwnProperty.call(message, \"playerName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.playerName);\n            if (message.platformCode != null && Object.hasOwnProperty.call(message, \"platformCode\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.platformCode);\n            if (message.currency != null && Object.hasOwnProperty.call(message, \"currency\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.currency);\n            if (message.servVersion != null && Object.hasOwnProperty.call(message, \"servVersion\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.servVersion);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LoginResponse message, length delimited. Does not implicitly {@link dtsdkserv.LoginResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof dtsdkserv.LoginResponse\n         * @static\n         * @param {dtsdkserv.ILoginResponse} message LoginResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LoginResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LoginResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof dtsdkserv.LoginResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {dtsdkserv.LoginResponse} LoginResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoginResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.dtsdkserv.LoginResponse();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.playerName = reader.string();\n                    break;\n                case 2:\n                    message.platformCode = reader.string();\n                    break;\n                case 3:\n                    message.currency = reader.string();\n                    break;\n                case 4:\n                    message.servVersion = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LoginResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof dtsdkserv.LoginResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {dtsdkserv.LoginResponse} LoginResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LoginResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LoginResponse message.\n         * @function verify\n         * @memberof dtsdkserv.LoginResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LoginResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.playerName != null && message.hasOwnProperty(\"playerName\"))\n                if (!$util.isString(message.playerName))\n                    return \"playerName: string expected\";\n            if (message.platformCode != null && message.hasOwnProperty(\"platformCode\"))\n                if (!$util.isString(message.platformCode))\n                    return \"platformCode: string expected\";\n            if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                if (!$util.isString(message.currency))\n                    return \"currency: string expected\";\n            if (message.servVersion != null && message.hasOwnProperty(\"servVersion\"))\n                if (!$util.isString(message.servVersion))\n                    return \"servVersion: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LoginResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof dtsdkserv.LoginResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {dtsdkserv.LoginResponse} LoginResponse\n         */\n        LoginResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.dtsdkserv.LoginResponse)\n                return object;\n            let message = new $root.dtsdkserv.LoginResponse();\n            if (object.playerName != null)\n                message.playerName = String(object.playerName);\n            if (object.platformCode != null)\n                message.platformCode = String(object.platformCode);\n            if (object.currency != null)\n                message.currency = String(object.currency);\n            if (object.servVersion != null)\n                message.servVersion = String(object.servVersion);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LoginResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof dtsdkserv.LoginResponse\n         * @static\n         * @param {dtsdkserv.LoginResponse} message LoginResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LoginResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.playerName = \"\";\n                object.platformCode = \"\";\n                object.currency = \"\";\n                object.servVersion = \"\";\n            }\n            if (message.playerName != null && message.hasOwnProperty(\"playerName\"))\n                object.playerName = message.playerName;\n            if (message.platformCode != null && message.hasOwnProperty(\"platformCode\"))\n                object.platformCode = message.platformCode;\n            if (message.currency != null && message.hasOwnProperty(\"currency\"))\n                object.currency = message.currency;\n            if (message.servVersion != null && message.hasOwnProperty(\"servVersion\"))\n                object.servVersion = message.servVersion;\n            return object;\n        };\n\n        /**\n         * Converts this LoginResponse to JSON.\n         * @function toJSON\n         * @memberof dtsdkserv.LoginResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LoginResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LoginResponse;\n    })();\n\n    dtsdkserv.KeepAliveRequest = (function() {\n\n        /**\n         * Properties of a KeepAliveRequest.\n         * @memberof dtsdkserv\n         * @interface IKeepAliveRequest\n         * @property {string|null} [version] KeepAliveRequest version\n         */\n\n        /**\n         * Constructs a new KeepAliveRequest.\n         * @memberof dtsdkserv\n         * @classdesc Represents a KeepAliveRequest.\n         * @implements IKeepAliveRequest\n         * @constructor\n         * @param {dtsdkserv.IKeepAliveRequest=} [properties] Properties to set\n         */\n        function KeepAliveRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * KeepAliveRequest version.\n         * @member {string} version\n         * @memberof dtsdkserv.KeepAliveRequest\n         * @instance\n         */\n        KeepAliveRequest.prototype.version = \"\";\n\n        /**\n         * Creates a new KeepAliveRequest instance using the specified properties.\n         * @function create\n         * @memberof dtsdkserv.KeepAliveRequest\n         * @static\n         * @param {dtsdkserv.IKeepAliveRequest=} [properties] Properties to set\n         * @returns {dtsdkserv.KeepAliveRequest} KeepAliveRequest instance\n         */\n        KeepAliveRequest.create = function create(properties) {\n            return new KeepAliveRequest(properties);\n        };\n\n        /**\n         * Encodes the specified KeepAliveRequest message. Does not implicitly {@link dtsdkserv.KeepAliveRequest.verify|verify} messages.\n         * @function encode\n         * @memberof dtsdkserv.KeepAliveRequest\n         * @static\n         * @param {dtsdkserv.IKeepAliveRequest} message KeepAliveRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        KeepAliveRequest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified KeepAliveRequest message, length delimited. Does not implicitly {@link dtsdkserv.KeepAliveRequest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof dtsdkserv.KeepAliveRequest\n         * @static\n         * @param {dtsdkserv.IKeepAliveRequest} message KeepAliveRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        KeepAliveRequest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a KeepAliveRequest message from the specified reader or buffer.\n         * @function decode\n         * @memberof dtsdkserv.KeepAliveRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {dtsdkserv.KeepAliveRequest} KeepAliveRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        KeepAliveRequest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.dtsdkserv.KeepAliveRequest();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.version = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a KeepAliveRequest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof dtsdkserv.KeepAliveRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {dtsdkserv.KeepAliveRequest} KeepAliveRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        KeepAliveRequest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a KeepAliveRequest message.\n         * @function verify\n         * @memberof dtsdkserv.KeepAliveRequest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        KeepAliveRequest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isString(message.version))\n                    return \"version: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a KeepAliveRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof dtsdkserv.KeepAliveRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {dtsdkserv.KeepAliveRequest} KeepAliveRequest\n         */\n        KeepAliveRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.dtsdkserv.KeepAliveRequest)\n                return object;\n            let message = new $root.dtsdkserv.KeepAliveRequest();\n            if (object.version != null)\n                message.version = String(object.version);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a KeepAliveRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof dtsdkserv.KeepAliveRequest\n         * @static\n         * @param {dtsdkserv.KeepAliveRequest} message KeepAliveRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        KeepAliveRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.version = \"\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                object.version = message.version;\n            return object;\n        };\n\n        /**\n         * Converts this KeepAliveRequest to JSON.\n         * @function toJSON\n         * @memberof dtsdkserv.KeepAliveRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        KeepAliveRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return KeepAliveRequest;\n    })();\n\n    dtsdkserv.KeepAliveResponse = (function() {\n\n        /**\n         * Properties of a KeepAliveResponse.\n         * @memberof dtsdkserv\n         * @interface IKeepAliveResponse\n         * @property {number|Long|null} [timeNow] KeepAliveResponse timeNow\n         */\n\n        /**\n         * Constructs a new KeepAliveResponse.\n         * @memberof dtsdkserv\n         * @classdesc Represents a KeepAliveResponse.\n         * @implements IKeepAliveResponse\n         * @constructor\n         * @param {dtsdkserv.IKeepAliveResponse=} [properties] Properties to set\n         */\n        function KeepAliveResponse(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * KeepAliveResponse timeNow.\n         * @member {number|Long} timeNow\n         * @memberof dtsdkserv.KeepAliveResponse\n         * @instance\n         */\n        KeepAliveResponse.prototype.timeNow = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new KeepAliveResponse instance using the specified properties.\n         * @function create\n         * @memberof dtsdkserv.KeepAliveResponse\n         * @static\n         * @param {dtsdkserv.IKeepAliveResponse=} [properties] Properties to set\n         * @returns {dtsdkserv.KeepAliveResponse} KeepAliveResponse instance\n         */\n        KeepAliveResponse.create = function create(properties) {\n            return new KeepAliveResponse(properties);\n        };\n\n        /**\n         * Encodes the specified KeepAliveResponse message. Does not implicitly {@link dtsdkserv.KeepAliveResponse.verify|verify} messages.\n         * @function encode\n         * @memberof dtsdkserv.KeepAliveResponse\n         * @static\n         * @param {dtsdkserv.IKeepAliveResponse} message KeepAliveResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        KeepAliveResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.timeNow != null && Object.hasOwnProperty.call(message, \"timeNow\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.timeNow);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified KeepAliveResponse message, length delimited. Does not implicitly {@link dtsdkserv.KeepAliveResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof dtsdkserv.KeepAliveResponse\n         * @static\n         * @param {dtsdkserv.IKeepAliveResponse} message KeepAliveResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        KeepAliveResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a KeepAliveResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof dtsdkserv.KeepAliveResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {dtsdkserv.KeepAliveResponse} KeepAliveResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        KeepAliveResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.dtsdkserv.KeepAliveResponse();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.timeNow = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a KeepAliveResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof dtsdkserv.KeepAliveResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {dtsdkserv.KeepAliveResponse} KeepAliveResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        KeepAliveResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a KeepAliveResponse message.\n         * @function verify\n         * @memberof dtsdkserv.KeepAliveResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        KeepAliveResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.timeNow != null && message.hasOwnProperty(\"timeNow\"))\n                if (!$util.isInteger(message.timeNow) && !(message.timeNow && $util.isInteger(message.timeNow.low) && $util.isInteger(message.timeNow.high)))\n                    return \"timeNow: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a KeepAliveResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof dtsdkserv.KeepAliveResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {dtsdkserv.KeepAliveResponse} KeepAliveResponse\n         */\n        KeepAliveResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.dtsdkserv.KeepAliveResponse)\n                return object;\n            let message = new $root.dtsdkserv.KeepAliveResponse();\n            if (object.timeNow != null)\n                if ($util.Long)\n                    (message.timeNow = $util.Long.fromValue(object.timeNow)).unsigned = false;\n                else if (typeof object.timeNow === \"string\")\n                    message.timeNow = parseInt(object.timeNow, 10);\n                else if (typeof object.timeNow === \"number\")\n                    message.timeNow = object.timeNow;\n                else if (typeof object.timeNow === \"object\")\n                    message.timeNow = new $util.LongBits(object.timeNow.low >>> 0, object.timeNow.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a KeepAliveResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof dtsdkserv.KeepAliveResponse\n         * @static\n         * @param {dtsdkserv.KeepAliveResponse} message KeepAliveResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        KeepAliveResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.timeNow = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timeNow = options.longs === String ? \"0\" : 0;\n            if (message.timeNow != null && message.hasOwnProperty(\"timeNow\"))\n                if (typeof message.timeNow === \"number\")\n                    object.timeNow = options.longs === String ? String(message.timeNow) : message.timeNow;\n                else\n                    object.timeNow = options.longs === String ? $util.Long.prototype.toString.call(message.timeNow) : options.longs === Number ? new $util.LongBits(message.timeNow.low >>> 0, message.timeNow.high >>> 0).toNumber() : message.timeNow;\n            return object;\n        };\n\n        /**\n         * Converts this KeepAliveResponse to JSON.\n         * @function toJSON\n         * @memberof dtsdkserv.KeepAliveResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        KeepAliveResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return KeepAliveResponse;\n    })();\n\n    dtsdkserv.CmdRet = (function() {\n\n        /**\n         * Properties of a CmdRet.\n         * @memberof dtsdkserv\n         * @interface ICmdRet\n         * @property {number|null} [mainType] CmdRet mainType\n         * @property {number|null} [subType] CmdRet subType\n         * @property {boolean|null} [isOk] CmdRet isOk\n         */\n\n        /**\n         * Constructs a new CmdRet.\n         * @memberof dtsdkserv\n         * @classdesc Represents a CmdRet.\n         * @implements ICmdRet\n         * @constructor\n         * @param {dtsdkserv.ICmdRet=} [properties] Properties to set\n         */\n        function CmdRet(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CmdRet mainType.\n         * @member {number} mainType\n         * @memberof dtsdkserv.CmdRet\n         * @instance\n         */\n        CmdRet.prototype.mainType = 0;\n\n        /**\n         * CmdRet subType.\n         * @member {number} subType\n         * @memberof dtsdkserv.CmdRet\n         * @instance\n         */\n        CmdRet.prototype.subType = 0;\n\n        /**\n         * CmdRet isOk.\n         * @member {boolean} isOk\n         * @memberof dtsdkserv.CmdRet\n         * @instance\n         */\n        CmdRet.prototype.isOk = false;\n\n        /**\n         * Creates a new CmdRet instance using the specified properties.\n         * @function create\n         * @memberof dtsdkserv.CmdRet\n         * @static\n         * @param {dtsdkserv.ICmdRet=} [properties] Properties to set\n         * @returns {dtsdkserv.CmdRet} CmdRet instance\n         */\n        CmdRet.create = function create(properties) {\n            return new CmdRet(properties);\n        };\n\n        /**\n         * Encodes the specified CmdRet message. Does not implicitly {@link dtsdkserv.CmdRet.verify|verify} messages.\n         * @function encode\n         * @memberof dtsdkserv.CmdRet\n         * @static\n         * @param {dtsdkserv.ICmdRet} message CmdRet message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdRet.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.mainType != null && Object.hasOwnProperty.call(message, \"mainType\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mainType);\n            if (message.subType != null && Object.hasOwnProperty.call(message, \"subType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.subType);\n            if (message.isOk != null && Object.hasOwnProperty.call(message, \"isOk\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isOk);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CmdRet message, length delimited. Does not implicitly {@link dtsdkserv.CmdRet.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof dtsdkserv.CmdRet\n         * @static\n         * @param {dtsdkserv.ICmdRet} message CmdRet message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CmdRet.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CmdRet message from the specified reader or buffer.\n         * @function decode\n         * @memberof dtsdkserv.CmdRet\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {dtsdkserv.CmdRet} CmdRet\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdRet.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.dtsdkserv.CmdRet();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.mainType = reader.int32();\n                    break;\n                case 2:\n                    message.subType = reader.int32();\n                    break;\n                case 3:\n                    message.isOk = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CmdRet message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof dtsdkserv.CmdRet\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {dtsdkserv.CmdRet} CmdRet\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CmdRet.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CmdRet message.\n         * @function verify\n         * @memberof dtsdkserv.CmdRet\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CmdRet.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.mainType != null && message.hasOwnProperty(\"mainType\"))\n                if (!$util.isInteger(message.mainType))\n                    return \"mainType: integer expected\";\n            if (message.subType != null && message.hasOwnProperty(\"subType\"))\n                if (!$util.isInteger(message.subType))\n                    return \"subType: integer expected\";\n            if (message.isOk != null && message.hasOwnProperty(\"isOk\"))\n                if (typeof message.isOk !== \"boolean\")\n                    return \"isOk: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CmdRet message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof dtsdkserv.CmdRet\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {dtsdkserv.CmdRet} CmdRet\n         */\n        CmdRet.fromObject = function fromObject(object) {\n            if (object instanceof $root.dtsdkserv.CmdRet)\n                return object;\n            let message = new $root.dtsdkserv.CmdRet();\n            if (object.mainType != null)\n                message.mainType = object.mainType | 0;\n            if (object.subType != null)\n                message.subType = object.subType | 0;\n            if (object.isOk != null)\n                message.isOk = Boolean(object.isOk);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CmdRet message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof dtsdkserv.CmdRet\n         * @static\n         * @param {dtsdkserv.CmdRet} message CmdRet\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CmdRet.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.mainType = 0;\n                object.subType = 0;\n                object.isOk = false;\n            }\n            if (message.mainType != null && message.hasOwnProperty(\"mainType\"))\n                object.mainType = message.mainType;\n            if (message.subType != null && message.hasOwnProperty(\"subType\"))\n                object.subType = message.subType;\n            if (message.isOk != null && message.hasOwnProperty(\"isOk\"))\n                object.isOk = message.isOk;\n            return object;\n        };\n\n        /**\n         * Converts this CmdRet to JSON.\n         * @function toJSON\n         * @memberof dtsdkserv.CmdRet\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CmdRet.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CmdRet;\n    })();\n\n    dtsdkserv.FreeSpin = (function() {\n\n        /**\n         * Properties of a FreeSpin.\n         * @memberof dtsdkserv\n         * @interface IFreeSpin\n         * @property {string|null} [id] FreeSpin id\n         * @property {number|null} [bet] FreeSpin bet\n         * @property {number|null} [line] FreeSpin line\n         * @property {number|null} [totalnums] FreeSpin totalnums\n         * @property {number|null} [times] FreeSpin times\n         * @property {number|null} [lastnums] FreeSpin lastnums\n         * @property {string|null} [Title] FreeSpin Title\n         * @property {string|null} [Info] FreeSpin Info\n         * @property {number|Long|null} [ExpireTime] FreeSpin ExpireTime\n         */\n\n        /**\n         * Constructs a new FreeSpin.\n         * @memberof dtsdkserv\n         * @classdesc Represents a FreeSpin.\n         * @implements IFreeSpin\n         * @constructor\n         * @param {dtsdkserv.IFreeSpin=} [properties] Properties to set\n         */\n        function FreeSpin(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FreeSpin id.\n         * @member {string} id\n         * @memberof dtsdkserv.FreeSpin\n         * @instance\n         */\n        FreeSpin.prototype.id = \"\";\n\n        /**\n         * FreeSpin bet.\n         * @member {number} bet\n         * @memberof dtsdkserv.FreeSpin\n         * @instance\n         */\n        FreeSpin.prototype.bet = 0;\n\n        /**\n         * FreeSpin line.\n         * @member {number} line\n         * @memberof dtsdkserv.FreeSpin\n         * @instance\n         */\n        FreeSpin.prototype.line = 0;\n\n        /**\n         * FreeSpin totalnums.\n         * @member {number} totalnums\n         * @memberof dtsdkserv.FreeSpin\n         * @instance\n         */\n        FreeSpin.prototype.totalnums = 0;\n\n        /**\n         * FreeSpin times.\n         * @member {number} times\n         * @memberof dtsdkserv.FreeSpin\n         * @instance\n         */\n        FreeSpin.prototype.times = 0;\n\n        /**\n         * FreeSpin lastnums.\n         * @member {number} lastnums\n         * @memberof dtsdkserv.FreeSpin\n         * @instance\n         */\n        FreeSpin.prototype.lastnums = 0;\n\n        /**\n         * FreeSpin Title.\n         * @member {string} Title\n         * @memberof dtsdkserv.FreeSpin\n         * @instance\n         */\n        FreeSpin.prototype.Title = \"\";\n\n        /**\n         * FreeSpin Info.\n         * @member {string} Info\n         * @memberof dtsdkserv.FreeSpin\n         * @instance\n         */\n        FreeSpin.prototype.Info = \"\";\n\n        /**\n         * FreeSpin ExpireTime.\n         * @member {number|Long} ExpireTime\n         * @memberof dtsdkserv.FreeSpin\n         * @instance\n         */\n        FreeSpin.prototype.ExpireTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new FreeSpin instance using the specified properties.\n         * @function create\n         * @memberof dtsdkserv.FreeSpin\n         * @static\n         * @param {dtsdkserv.IFreeSpin=} [properties] Properties to set\n         * @returns {dtsdkserv.FreeSpin} FreeSpin instance\n         */\n        FreeSpin.create = function create(properties) {\n            return new FreeSpin(properties);\n        };\n\n        /**\n         * Encodes the specified FreeSpin message. Does not implicitly {@link dtsdkserv.FreeSpin.verify|verify} messages.\n         * @function encode\n         * @memberof dtsdkserv.FreeSpin\n         * @static\n         * @param {dtsdkserv.IFreeSpin} message FreeSpin message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FreeSpin.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.bet != null && Object.hasOwnProperty.call(message, \"bet\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.bet);\n            if (message.line != null && Object.hasOwnProperty.call(message, \"line\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.line);\n            if (message.totalnums != null && Object.hasOwnProperty.call(message, \"totalnums\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.totalnums);\n            if (message.times != null && Object.hasOwnProperty.call(message, \"times\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.times);\n            if (message.lastnums != null && Object.hasOwnProperty.call(message, \"lastnums\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.lastnums);\n            if (message.Title != null && Object.hasOwnProperty.call(message, \"Title\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.Title);\n            if (message.Info != null && Object.hasOwnProperty.call(message, \"Info\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.Info);\n            if (message.ExpireTime != null && Object.hasOwnProperty.call(message, \"ExpireTime\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).int64(message.ExpireTime);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FreeSpin message, length delimited. Does not implicitly {@link dtsdkserv.FreeSpin.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof dtsdkserv.FreeSpin\n         * @static\n         * @param {dtsdkserv.IFreeSpin} message FreeSpin message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FreeSpin.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FreeSpin message from the specified reader or buffer.\n         * @function decode\n         * @memberof dtsdkserv.FreeSpin\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {dtsdkserv.FreeSpin} FreeSpin\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FreeSpin.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.dtsdkserv.FreeSpin();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.bet = reader.int32();\n                    break;\n                case 3:\n                    message.line = reader.int32();\n                    break;\n                case 4:\n                    message.totalnums = reader.int32();\n                    break;\n                case 5:\n                    message.times = reader.int32();\n                    break;\n                case 6:\n                    message.lastnums = reader.int32();\n                    break;\n                case 7:\n                    message.Title = reader.string();\n                    break;\n                case 8:\n                    message.Info = reader.string();\n                    break;\n                case 9:\n                    message.ExpireTime = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FreeSpin message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof dtsdkserv.FreeSpin\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {dtsdkserv.FreeSpin} FreeSpin\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FreeSpin.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FreeSpin message.\n         * @function verify\n         * @memberof dtsdkserv.FreeSpin\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FreeSpin.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.bet != null && message.hasOwnProperty(\"bet\"))\n                if (!$util.isInteger(message.bet))\n                    return \"bet: integer expected\";\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                if (!$util.isInteger(message.line))\n                    return \"line: integer expected\";\n            if (message.totalnums != null && message.hasOwnProperty(\"totalnums\"))\n                if (!$util.isInteger(message.totalnums))\n                    return \"totalnums: integer expected\";\n            if (message.times != null && message.hasOwnProperty(\"times\"))\n                if (!$util.isInteger(message.times))\n                    return \"times: integer expected\";\n            if (message.lastnums != null && message.hasOwnProperty(\"lastnums\"))\n                if (!$util.isInteger(message.lastnums))\n                    return \"lastnums: integer expected\";\n            if (message.Title != null && message.hasOwnProperty(\"Title\"))\n                if (!$util.isString(message.Title))\n                    return \"Title: string expected\";\n            if (message.Info != null && message.hasOwnProperty(\"Info\"))\n                if (!$util.isString(message.Info))\n                    return \"Info: string expected\";\n            if (message.ExpireTime != null && message.hasOwnProperty(\"ExpireTime\"))\n                if (!$util.isInteger(message.ExpireTime) && !(message.ExpireTime && $util.isInteger(message.ExpireTime.low) && $util.isInteger(message.ExpireTime.high)))\n                    return \"ExpireTime: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FreeSpin message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof dtsdkserv.FreeSpin\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {dtsdkserv.FreeSpin} FreeSpin\n         */\n        FreeSpin.fromObject = function fromObject(object) {\n            if (object instanceof $root.dtsdkserv.FreeSpin)\n                return object;\n            let message = new $root.dtsdkserv.FreeSpin();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.bet != null)\n                message.bet = object.bet | 0;\n            if (object.line != null)\n                message.line = object.line | 0;\n            if (object.totalnums != null)\n                message.totalnums = object.totalnums | 0;\n            if (object.times != null)\n                message.times = object.times | 0;\n            if (object.lastnums != null)\n                message.lastnums = object.lastnums | 0;\n            if (object.Title != null)\n                message.Title = String(object.Title);\n            if (object.Info != null)\n                message.Info = String(object.Info);\n            if (object.ExpireTime != null)\n                if ($util.Long)\n                    (message.ExpireTime = $util.Long.fromValue(object.ExpireTime)).unsigned = false;\n                else if (typeof object.ExpireTime === \"string\")\n                    message.ExpireTime = parseInt(object.ExpireTime, 10);\n                else if (typeof object.ExpireTime === \"number\")\n                    message.ExpireTime = object.ExpireTime;\n                else if (typeof object.ExpireTime === \"object\")\n                    message.ExpireTime = new $util.LongBits(object.ExpireTime.low >>> 0, object.ExpireTime.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FreeSpin message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof dtsdkserv.FreeSpin\n         * @static\n         * @param {dtsdkserv.FreeSpin} message FreeSpin\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FreeSpin.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.id = \"\";\n                object.bet = 0;\n                object.line = 0;\n                object.totalnums = 0;\n                object.times = 0;\n                object.lastnums = 0;\n                object.Title = \"\";\n                object.Info = \"\";\n                if ($util.Long) {\n                    let long = new $util.Long(0, 0, false);\n                    object.ExpireTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.ExpireTime = options.longs === String ? \"0\" : 0;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.bet != null && message.hasOwnProperty(\"bet\"))\n                object.bet = message.bet;\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                object.line = message.line;\n            if (message.totalnums != null && message.hasOwnProperty(\"totalnums\"))\n                object.totalnums = message.totalnums;\n            if (message.times != null && message.hasOwnProperty(\"times\"))\n                object.times = message.times;\n            if (message.lastnums != null && message.hasOwnProperty(\"lastnums\"))\n                object.lastnums = message.lastnums;\n            if (message.Title != null && message.hasOwnProperty(\"Title\"))\n                object.Title = message.Title;\n            if (message.Info != null && message.hasOwnProperty(\"Info\"))\n                object.Info = message.Info;\n            if (message.ExpireTime != null && message.hasOwnProperty(\"ExpireTime\"))\n                if (typeof message.ExpireTime === \"number\")\n                    object.ExpireTime = options.longs === String ? String(message.ExpireTime) : message.ExpireTime;\n                else\n                    object.ExpireTime = options.longs === String ? $util.Long.prototype.toString.call(message.ExpireTime) : options.longs === Number ? new $util.LongBits(message.ExpireTime.low >>> 0, message.ExpireTime.high >>> 0).toNumber() : message.ExpireTime;\n            return object;\n        };\n\n        /**\n         * Converts this FreeSpin to JSON.\n         * @function toJSON\n         * @memberof dtsdkserv.FreeSpin\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FreeSpin.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return FreeSpin;\n    })();\n\n    dtsdkserv.FreeSpinRsp = (function() {\n\n        /**\n         * Properties of a FreeSpinRsp.\n         * @memberof dtsdkserv\n         * @interface IFreeSpinRsp\n         * @property {Array.<dtsdkserv.IFreeSpin>|null} [FSpin] FreeSpinRsp FSpin\n         */\n\n        /**\n         * Constructs a new FreeSpinRsp.\n         * @memberof dtsdkserv\n         * @classdesc Represents a FreeSpinRsp.\n         * @implements IFreeSpinRsp\n         * @constructor\n         * @param {dtsdkserv.IFreeSpinRsp=} [properties] Properties to set\n         */\n        function FreeSpinRsp(properties) {\n            this.FSpin = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FreeSpinRsp FSpin.\n         * @member {Array.<dtsdkserv.IFreeSpin>} FSpin\n         * @memberof dtsdkserv.FreeSpinRsp\n         * @instance\n         */\n        FreeSpinRsp.prototype.FSpin = $util.emptyArray;\n\n        /**\n         * Creates a new FreeSpinRsp instance using the specified properties.\n         * @function create\n         * @memberof dtsdkserv.FreeSpinRsp\n         * @static\n         * @param {dtsdkserv.IFreeSpinRsp=} [properties] Properties to set\n         * @returns {dtsdkserv.FreeSpinRsp} FreeSpinRsp instance\n         */\n        FreeSpinRsp.create = function create(properties) {\n            return new FreeSpinRsp(properties);\n        };\n\n        /**\n         * Encodes the specified FreeSpinRsp message. Does not implicitly {@link dtsdkserv.FreeSpinRsp.verify|verify} messages.\n         * @function encode\n         * @memberof dtsdkserv.FreeSpinRsp\n         * @static\n         * @param {dtsdkserv.IFreeSpinRsp} message FreeSpinRsp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FreeSpinRsp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.FSpin != null && message.FSpin.length)\n                for (let i = 0; i < message.FSpin.length; ++i)\n                    $root.dtsdkserv.FreeSpin.encode(message.FSpin[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FreeSpinRsp message, length delimited. Does not implicitly {@link dtsdkserv.FreeSpinRsp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof dtsdkserv.FreeSpinRsp\n         * @static\n         * @param {dtsdkserv.IFreeSpinRsp} message FreeSpinRsp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FreeSpinRsp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FreeSpinRsp message from the specified reader or buffer.\n         * @function decode\n         * @memberof dtsdkserv.FreeSpinRsp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {dtsdkserv.FreeSpinRsp} FreeSpinRsp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FreeSpinRsp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.dtsdkserv.FreeSpinRsp();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.FSpin && message.FSpin.length))\n                        message.FSpin = [];\n                    message.FSpin.push($root.dtsdkserv.FreeSpin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FreeSpinRsp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof dtsdkserv.FreeSpinRsp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {dtsdkserv.FreeSpinRsp} FreeSpinRsp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FreeSpinRsp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FreeSpinRsp message.\n         * @function verify\n         * @memberof dtsdkserv.FreeSpinRsp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FreeSpinRsp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.FSpin != null && message.hasOwnProperty(\"FSpin\")) {\n                if (!Array.isArray(message.FSpin))\n                    return \"FSpin: array expected\";\n                for (let i = 0; i < message.FSpin.length; ++i) {\n                    let error = $root.dtsdkserv.FreeSpin.verify(message.FSpin[i]);\n                    if (error)\n                        return \"FSpin.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a FreeSpinRsp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof dtsdkserv.FreeSpinRsp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {dtsdkserv.FreeSpinRsp} FreeSpinRsp\n         */\n        FreeSpinRsp.fromObject = function fromObject(object) {\n            if (object instanceof $root.dtsdkserv.FreeSpinRsp)\n                return object;\n            let message = new $root.dtsdkserv.FreeSpinRsp();\n            if (object.FSpin) {\n                if (!Array.isArray(object.FSpin))\n                    throw TypeError(\".dtsdkserv.FreeSpinRsp.FSpin: array expected\");\n                message.FSpin = [];\n                for (let i = 0; i < object.FSpin.length; ++i) {\n                    if (typeof object.FSpin[i] !== \"object\")\n                        throw TypeError(\".dtsdkserv.FreeSpinRsp.FSpin: object expected\");\n                    message.FSpin[i] = $root.dtsdkserv.FreeSpin.fromObject(object.FSpin[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FreeSpinRsp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof dtsdkserv.FreeSpinRsp\n         * @static\n         * @param {dtsdkserv.FreeSpinRsp} message FreeSpinRsp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FreeSpinRsp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.FSpin = [];\n            if (message.FSpin && message.FSpin.length) {\n                object.FSpin = [];\n                for (let j = 0; j < message.FSpin.length; ++j)\n                    object.FSpin[j] = $root.dtsdkserv.FreeSpin.toObject(message.FSpin[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FreeSpinRsp to JSON.\n         * @function toJSON\n         * @memberof dtsdkserv.FreeSpinRsp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FreeSpinRsp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return FreeSpinRsp;\n    })();\n\n    /**\n     * ScreenType enum.\n     * @name dtsdkserv.ScreenType\n     * @enum {number}\n     * @property {number} INVALIDSCREENTYPE=0 INVALIDSCREENTYPE value\n     * @property {number} HORIZONTAL=1 HORIZONTAL value\n     * @property {number} VERTICAL=2 VERTICAL value\n     */\n    dtsdkserv.ScreenType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"INVALIDSCREENTYPE\"] = 0;\n        values[valuesById[1] = \"HORIZONTAL\"] = 1;\n        values[valuesById[2] = \"VERTICAL\"] = 2;\n        return values;\n    })();\n\n    dtsdkserv.ChangeScreenRequest = (function() {\n\n        /**\n         * Properties of a ChangeScreenRequest.\n         * @memberof dtsdkserv\n         * @interface IChangeScreenRequest\n         * @property {dtsdkserv.ScreenType|null} [screen] ChangeScreenRequest screen\n         */\n\n        /**\n         * Constructs a new ChangeScreenRequest.\n         * @memberof dtsdkserv\n         * @classdesc Represents a ChangeScreenRequest.\n         * @implements IChangeScreenRequest\n         * @constructor\n         * @param {dtsdkserv.IChangeScreenRequest=} [properties] Properties to set\n         */\n        function ChangeScreenRequest(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ChangeScreenRequest screen.\n         * @member {dtsdkserv.ScreenType} screen\n         * @memberof dtsdkserv.ChangeScreenRequest\n         * @instance\n         */\n        ChangeScreenRequest.prototype.screen = 0;\n\n        /**\n         * Creates a new ChangeScreenRequest instance using the specified properties.\n         * @function create\n         * @memberof dtsdkserv.ChangeScreenRequest\n         * @static\n         * @param {dtsdkserv.IChangeScreenRequest=} [properties] Properties to set\n         * @returns {dtsdkserv.ChangeScreenRequest} ChangeScreenRequest instance\n         */\n        ChangeScreenRequest.create = function create(properties) {\n            return new ChangeScreenRequest(properties);\n        };\n\n        /**\n         * Encodes the specified ChangeScreenRequest message. Does not implicitly {@link dtsdkserv.ChangeScreenRequest.verify|verify} messages.\n         * @function encode\n         * @memberof dtsdkserv.ChangeScreenRequest\n         * @static\n         * @param {dtsdkserv.IChangeScreenRequest} message ChangeScreenRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ChangeScreenRequest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.screen != null && Object.hasOwnProperty.call(message, \"screen\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.screen);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ChangeScreenRequest message, length delimited. Does not implicitly {@link dtsdkserv.ChangeScreenRequest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof dtsdkserv.ChangeScreenRequest\n         * @static\n         * @param {dtsdkserv.IChangeScreenRequest} message ChangeScreenRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ChangeScreenRequest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ChangeScreenRequest message from the specified reader or buffer.\n         * @function decode\n         * @memberof dtsdkserv.ChangeScreenRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {dtsdkserv.ChangeScreenRequest} ChangeScreenRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ChangeScreenRequest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.dtsdkserv.ChangeScreenRequest();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.screen = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ChangeScreenRequest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof dtsdkserv.ChangeScreenRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {dtsdkserv.ChangeScreenRequest} ChangeScreenRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ChangeScreenRequest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ChangeScreenRequest message.\n         * @function verify\n         * @memberof dtsdkserv.ChangeScreenRequest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ChangeScreenRequest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.screen != null && message.hasOwnProperty(\"screen\"))\n                switch (message.screen) {\n                default:\n                    return \"screen: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates a ChangeScreenRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof dtsdkserv.ChangeScreenRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {dtsdkserv.ChangeScreenRequest} ChangeScreenRequest\n         */\n        ChangeScreenRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.dtsdkserv.ChangeScreenRequest)\n                return object;\n            let message = new $root.dtsdkserv.ChangeScreenRequest();\n            switch (object.screen) {\n            case \"INVALIDSCREENTYPE\":\n            case 0:\n                message.screen = 0;\n                break;\n            case \"HORIZONTAL\":\n            case 1:\n                message.screen = 1;\n                break;\n            case \"VERTICAL\":\n            case 2:\n                message.screen = 2;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ChangeScreenRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof dtsdkserv.ChangeScreenRequest\n         * @static\n         * @param {dtsdkserv.ChangeScreenRequest} message ChangeScreenRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ChangeScreenRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.screen = options.enums === String ? \"INVALIDSCREENTYPE\" : 0;\n            if (message.screen != null && message.hasOwnProperty(\"screen\"))\n                object.screen = options.enums === String ? $root.dtsdkserv.ScreenType[message.screen] : message.screen;\n            return object;\n        };\n\n        /**\n         * Converts this ChangeScreenRequest to JSON.\n         * @function toJSON\n         * @memberof dtsdkserv.ChangeScreenRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ChangeScreenRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ChangeScreenRequest;\n    })();\n\n    return dtsdkserv;\n})();","var config = {\n    // outputlog on\n    outputlog: false\n};\n\nfunction log(type, info) {\n    if (config.outputlog) {\n        console.log('[' + type + '] ' + info);\n    }\n}\n\nfunction setUint16(buf, start, val) {\n    buf[start] = (val & 0x00ff);\n    buf[start + 1] = ((val & 0xff00) >> 8);\n};\n\nfunction getUint16(buf, start) {\n    return buf[start] + (buf[start + 1] << 8);\n};\n\nfunction getUint32(buf, start) {\n    return buf[start] + (buf[start + 1] << 8) + (buf[start + 2] << 16) + (buf[start + 3] << 24);\n};\n\nfunction setUint32(buf, start, val) {\n    buf[start] = (val & 0x000000ff);\n    buf[start + 1] = ((val & 0x0000ff00) >> 8);\n    buf[start + 2] = ((val & 0x00ff0000) >> 16);\n    buf[start + 3] = ((val & 0xff000000) >> 24);\n};\n\nfunction appendBytes(buf1, buf2) {\n    let buf = new Uint8Array(buf1.length + buf2.length);\n    buf.set(buf1, 0);\n    buf.set(buf2, buf1.length);\n    return buf;\n};\n\nexport {\n    config,\n    log,\n    setUint16,\n    getUint16,\n    setUint32,\n    getUint32,\n    appendBytes\n}\n","import { DTCommonClient } from './dtcommonclient';\nimport { dtsdkserv as pb } from './proto';\nimport { config, log } from './util';\n\nvar client = null;\nconst VER = '1.0.0';\n\n// onNoticeMsg(msg)\nfunction init(servaddr) {\n    log('info', 'dtapi ' + VER + ' init...');\n\n    if (servaddr == undefined || servaddr == '') {\n        return ;\n    }\n\n    if (client != null) {\n        client.close();\n    }\n\n    client = new DTCommonClient(servaddr);\n    client.connect();\n}\n\nfunction onWebSocketState(onOpen,onMessage,onError,onClose) {\n    client.onWebSocketOpenCallBack = onOpen;\n    client.onWebSocketOnMessage = onMessage;\n    client.onWebSocketOnError = onError;\n    client.onWebSocketOnClose = onClose;\n}\n\nfunction createObject(maintype,subtype) {\n    var obj = client.createObject(maintype,subtype);\n    return obj;\n}\n\nfunction pushCallBack(maintype,subtype,callback) {\n    client.pushCallBack(maintype,subtype,callback);\n}\n\nfunction sendMsgToDtsdk(maintype,subtype,msg,callback) {\n    client.sendmsg(maintype,subtype,msg,callback);\n}\n\n//获取连接状态\nfunction getConneting() {\n    let isconneting = false;\n    if(client){\n        isconneting = client.isConnecting;\n    }\n    return isconneting;\n}\n//获取版本号\nfunction getVersion() {\n    if(client){\n        return client.version;\n    }\n    return \"\";\n}\n//获取使用场景\nfunction clientType() {\n    if(client){\n        return client.clienttype;\n    }\n    return \"\";\n}\n//获取dtsdk，并与外部操作dtsdk里面接口\nfunction getDtsdkclient() {\n    return client;\n}\n\nexport {\n\n    // dtsdk的配置项，可以配置关闭log等\n    config,\n\n    // 协议，需要和服务器交互的所有常量都通过enum定义在这里\n    // 使用该对象内常量作为参数和服务器交互\n    pb,\n\n    // 初始化dtsdk接口\n    init,\n    onWebSocketState,\n    createObject,\n    pushCallBack,\n    sendMsgToDtsdk,\n\n    getConneting,\n    getVersion,\n    clientType,\n    getDtsdkclient,\n};","import { dtsdkserv as pb } from './proto';\nimport { log,\n    setUint16,\n    getUint16,\n    setUint32,\n    getUint32,\n    appendBytes } from './util';\n\nexport var WebSocket = WebSocket || window.WebSocket || window.MozWebSocket;\nexport var HEADERLEN = 4;\n\n// LittleEndian\n\nexport class DTCommonClient {\n    /**\n     * 大厅和网页版公用代码---start\n     * **/\n    constructor(addr) {\n        log('info', 'create DTCommonClient Instance.');\n\n        this.servAddr = addr;\n        this.ws = null;\n        this.msgbuf = null;\n\n        //版本号\n        this.version = \"1.0.6\";\n\n        //网络连接状态\n        this.isConnecting = false;\n\n        //心跳定时器\n        this.heartTimer = null;\n        //心跳定时器时间间隔\n        this.heartTime = 30;\n        //心跳收消息时间\n        this.heartAcceptTime = 10;\n        //是否接收到服务端的心跳响应\n        this.hasAcceptMsg = false;\n        //设置重连次数\n        this.reconnectTimes = 0;\n        //是否是主动断开连接\n        this.isByActive = false;\n\n        this.onWebSocketOpenCallBack = null;\n        this.onWebSocketOnMessage = null;\n        this.onWebSocketOnError = null;\n        this.onWebSocketOnClose = null;\n\n        this.clientdata = [];\n        this.initdata();\n    }\n    initdata(){\n        this.clientdata = [];\n        var MainTypeArr = Object.keys(pb.MainType);\n        for(var i = 0; i < MainTypeArr.length; i++){\n            this.clientdata.push([]);\n        }\n        var SubBaseTypeArr = Object.keys(pb.SubBaseType);\n        for(var i = 0; i < SubBaseTypeArr.length; i++){\n            var reqdecode = null;\n            var rspdecode = null;\n            if(i == 0){\n                reqdecode = pb.KeepAliveRequest;\n            }\n            if(i == 1){\n                rspdecode = pb.KeepAliveResponse;\n            }\n            if(i == 2){\n                rspdecode = pb.ErrResponse;\n            }\n            if(i == 3){\n                rspdecode = pb.CmdRet;\n            }\n            this.clientdata[0].push([null,reqdecode,rspdecode]);\n        }\n        var SubAccountTypeArr = Object.keys(pb.SubAccountType);\n        for(var i = 0; i < SubAccountTypeArr.length; i++){\n            var reqdecode = null;\n            var rspdecode = null;\n            if(i == 0){\n                reqdecode = pb.LoginRequest;\n            }\n            if(i == 1){\n                rspdecode = pb.LoginResponse;\n            }\n            this.clientdata[1].push([null,reqdecode,rspdecode]);\n        }\n        var SubGameTypeArr = Object.keys(pb.SubGameType);\n        for(var i = 0; i < SubGameTypeArr.length; i++){\n            var reqdecode = null;\n            var rspdecode = null;\n            if(i == 0){\n                rspdecode = pb.FreeSpinRsp;\n            }\n            if(i == 1){\n                rspdecode = pb.FreeSpin;\n            }\n            if(i == 2){\n                reqdecode = pb.ChangeScreenRequest;\n            }\n            this.clientdata[2].push([null,reqdecode,rspdecode]);\n        }\n        log(\"length\",this.clientdata.length);\n    }\n    pushCallBack(maintype,subtype,callback) {\n        if(this.clientdata[maintype] && this.clientdata[maintype][subtype]){\n            this.clientdata[maintype][subtype][0] = callback;\n        }else {\n            log(\"bucunzai\",\"\");\n        }\n    }\n    getCallBack(header,buf){\n        var msg = \"\";\n        if(buf){\n            msg = this.clientdata[header.maintype][header.subtype][2].decode(buf,header.len);\n        }\n        if(this.clientdata[header.maintype][header.subtype][0]) {\n            this.clientdata[header.maintype][header.subtype][0](msg);\n        }else {\n            log(\"bucunzai1\",\"\");\n        }\n    }\n    //连接服务器\n    connect() {\n        if(this.isConnecting){\n            return;\n        }\n        log('info', 'connect dtapiserv ' + this.servAddr + ' ...');\n\n        this.ws = new WebSocket(this.servAddr);\n\n        this.ws.binaryType = 'arraybuffer';\n        let self = this;\n        this.ws.onopen = (evt) => {\n            this.isConnecting = true;\n            this.isByActive = false;\n            //服务端连上了游戏客户端处理\n            if(self.onWebSocketOpenCallBack){\n                self.onWebSocketOpenCallBack(evt);\n            }\n\n        };\n        this.ws.onmessage = (evt) => {\n            //在此处解析服务端发来的数据\n            self._ondata(evt.data, evt.flags);\n        };\n        this.ws.onerror = (evt) => {\n            //在此处处理服务端连接错误问题\n            self.isConnecting = false;\n            log('info', 'dtapiserv ' + self.servAddr + ' error.');\n            log(\"net conneting err\", \" \");\n        };\n        this.ws.onclose = function(evt) {\n            ///在此处处理服务端断开问题\n            self.isConnecting = false;\n            log('info', 'dtapiserv ' + self.servAddr + ' close.');\n            log(\"net conneting fail\", \" \");\n            self.ws = null;\n            if(self.onWebSocketOnClose && self.isByActive == false){\n                self.onWebSocketOnClose(evt);\n            }\n            self.stopReConnect();\n            self.reConnect();\n        };\n    }\n    //网络断开后重连\n    reConnect() {\n        this.reconnectTimes++;\n        log(\"this.reconnectTimes -- \",this.reconnectTimes);\n        if(this.reconnectTimes >= 5){\n            return;\n        }\n        this.connect();\n    }\n    //停止重连\n    stopReConnect() {\n\n    }\n\n    //接受游戏客户端创建Object\n    createObject(maintype,subtype){\n        let obj;\n        if(this.clientdata[maintype][subtype] && this.clientdata[maintype][subtype][1]){\n            obj = this.clientdata[maintype][subtype][1].create();\n        }\n        return obj;\n    }\n\n    close() {\n        log(\"The client initiatively closes the network connection.\", \" \");\n        if (this.ws != null) {\n            log(\"this.ws closeing\",\" \");\n            this.ws.close();\n            log(\"this.ws closed\",\" \");\n            //this.ws = null;\n        }\n        if(this.heartTimer != null){\n            this.stopHeartTimer();\n        }\n    }\n    //外部断网，不支持重连\n    closebyclient() {\n        log(\"The client initiatively closes the network connection.\", \" \");\n        if (this.ws != null) {\n            this.isByActive = true;\n            this.reconnectTimes = 5;\n            log(\"this.ws closeing\",\" \");\n            this.ws.close();\n            log(\"this.ws closed\",\" \");\n            //this.ws = null;\n        }\n        if(this.heartTimer != null){\n            this.stopHeartTimer();\n        }\n    }\n    //接受游戏客户端发送的请求\n    sendmsg(maintype, subtype, msg, cb) {\n        if (this.ws != null) {\n            var buf = this.clientdata[maintype][subtype][1].encode(msg).finish();\n\n            let header = new Uint8Array(HEADERLEN);\n            header[0] = maintype;\n            header[1] = subtype;\n            setUint16(header, 2, buf.length);\n            setUint32(header, 4, 0);\n            setUint16(header, 8, 0);\n            this.ws.send(appendBytes(header, buf));\n        }\n    }\n\n    //解析服务端返回的数据\n    _ondata(data, flags) {\n        this.parseMsg(data);\n    }\n    parseHeader(buf) {\n        return {\n            maintype: buf[0],\n            subtype: buf[1],\n            len: getUint16(buf, 2)\n\n        };\n    }\n    parseMsg(data) {\n        this.msgbuf = null;\n        if (this.msgbuf == null) {\n            this.msgbuf = new Uint8Array(data);\n        }\n        else {\n            this.msgbuf = appendBytes(this.msgbuf, new Uint8Array(data));\n        }\n\n        if (this.msgbuf.length >= HEADERLEN) {\n            let header = this.parseHeader(this.msgbuf);\n            if (header.len + HEADERLEN == this.msgbuf.length) {\n\n                if (header.len > 0) {\n                    let buf = this.msgbuf.subarray(HEADERLEN, header.len + HEADERLEN);\n                    this.onMsg(header, buf);\n                }\n                else {\n                    this.onMsg(header, null);\n                }\n\n            }\n            else if (header.len + HEADERLEN < this.msgbuf.length) {\n                return ;\n            }\n            else {\n                if (header.len > 0) {\n                    let buf = this.msgbuf.subarray(HEADERLEN, header.len + HEADERLEN);\n                    this.onMsg(header, buf);\n                }\n                else {\n                    this.onMsg(header, null);\n                }\n\n                this.msgbuf = this.msgbuf.subarray(HEADERLEN + header.len, this.msgbuf.length - header.len);\n            }\n        }\n    }\n    onMsg(header, buf) {\n        // 主基础协议 心跳在此维护\n        if (header.maintype == pb.MainType.MainBase && header.subtype == pb.SubBaseType.SubKeepAliveRsp){\n            //this.getCallBack(header,buf);\n            var msg = pb.KeepAliveResponse.decode(buf, header.len);\n            this.onKeepAliveResponse(msg);\n        }else {\n            if(header.maintype == pb.MainType.MainAccount) {\n                if (header.subtype == pb.SubAccountType.SubAccountLoginRsp || header.subtype == pb.SubAccountType.SubLoginRsp) {\n                    this.onKeepAliveRequest();\n                }\n            }\n            this.getCallBack(header, buf);\n        }\n\n    }\n\n    /***********主基础协议****************************************************************************************************/\n    onKeepAliveRequest() {\n        if(this.heartTimer == null){\n            let count = 0;\n            let self = this;\n            self.startHeartTimer();\n            this.heartTimer = setInterval(function () {\n                count++;\n                if(count > self.heartAcceptTime && self.hasAcceptMsg == false){\n                    //网络连接失败\n                    log(\"10 seconds later, no heartbeat was returned.\", \" \");\n                    count = 0;\n                    self.stopHeartTimer();\n                    self.isConnecting = false;\n                    self.close();\n                    self.clientdata[pb.MainType.MainBase][pb.SubBaseType.SubErrRsp][0]();\n                }\n                if(count > self.heartTime){\n                    count = 0;\n                    self.startHeartTimer();\n                }\n            },1000);\n        }\n\n    }\n    //主基础协议 -- 客户端心跳请求\n    startHeartTimer() {\n        if(this.isConnecting == true){\n            log(\"send heartbeat\", \" \");\n            this.hasAcceptMsg = false;\n            let msg = this.createObject(pb.MainType.MainBase, pb.SubBaseType.SubKeepAliveReq);\n            msg.version = this.version;\n            this.sendmsg(pb.MainType.MainBase, pb.SubBaseType.SubKeepAliveReq, msg);\n        }\n    }\n    //主基础协议 -- 客户端心跳返回\n    onKeepAliveResponse(msg) {\n        log(\"Accept heartbeat message\",timestampToTime(msg.timeNow));\n        this.hasAcceptMsg = true;\n    }\n    stopHeartTimer() {\n        if(this.heartTimer){\n            log(\"remove heartbeat\", \" \");\n            clearInterval(this.heartTimer);\n            this.heartTimer = null;\n        }\n    }\n    /***********主基础协议****************************************************************************************************/\n\n}\n\nfunction timestampToTime(timestamp) {\n    var date = new Date(timestamp * 1000);//时间戳为10位需*1000，时间戳为13位的话不需乘1000\n    var Y = date.getFullYear() + '-';\n    var M = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';\n    var D = date.getDate() + ' ';\n    var h = date.getHours() + ':';\n    var m = date.getMinutes() + ':';\n    var s = date.getSeconds();\n    return Y+M+D+h+m+s;\n}"],"sourceRoot":""}